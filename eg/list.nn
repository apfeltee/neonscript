
// this behaves wildly differently when compiled with clang. but why??

class Node
{
    constructor(element)
    {
        this.element = element;
        this.next = null
    }
}

class LinkedList
{
    constructor()
    {
        this.head = null;
        this.size = 0;
    }

    // adds an element at the end of list
    add(element)
    {
        let node = new Node(element);
        // to store current node
        let current;
        // if list is Empty add the element and make it head
        if (this.head == null)
        {
            this.head = node;
        }
        else
        {
            current = this.head;
            // iterate to the end of the list
            while(current.next)
            {
                current = current.next;
            }
            // add node
            current.next = node;
        }
        this.size++;
    }

    // insert element at the position index of the list
    insertAt(element, index)
    {
        if (index < 0 || index > this.size)
        {
            return println("Please enter a valid index.");
        }
        else
        {
            let node = new Node(element);
            let curr;
            let prev;
            curr = this.head;
            // add the element to the first index
            if (index == 0)
            {
                node.next = this.head;
                this.head = node;
            }
            else
            {
                curr = this.head;
                let it = 0;
                // iterate over the list to find
                // the position to insert
                while (it < index)
                {
                    it++;
                    prev = curr;
                    if(curr.next == null)
                    {
                        break;
                    }
                    curr = curr.next;
                }
                // adding an element
                node.next = curr;
                prev.next = node;
            }
            this.size++;
        }
    }

    // removes an element from the
    // specified location
    removeFrom(index)
    {
        if (index < 0 || index >= this.size)
        {
            println("Please Enter a valid index");
            return;
        }
        else
        {
            let curr = 0
            let prev = 0
            let it = 0;
            curr = this.head;
            prev = curr;
            // deleting first element
            if (index == 0)
            {
                this.head = curr.next;
            }
            else
            {
                // iterate over the list to the
                // position to remove an element
                while (it < index)
                {
                    it++;
                    prev = curr;
                    curr = curr.next;
                }
                // remove the element
                prev.next = curr.next;
            }
            this.size--;
            // return the remove element
            return curr.element;
        }
    }

    // removes a given element from the
    // list
    removeElement(element)
    {
        let current = this.head;
        let prev = null;
        // iterate over the list
        while (current != null)
        {
            // comparing element with current
            // element if found then remove the
            // and return true
            if (current.element == element)
            {
                if (prev == null)
                {
                    this.head = current.next;
                }
                else
                {
                    prev.next = current.next;
                }
                this.size--;
                return current.element;
            }
            prev = current;
            current = current.next;
        }
        return -1;
    }

    // finds the index of element
    indexOf(element)
    {
        let count = 0;
        let current = this.head;
        // iterate over the list
        while (current != null)
        {
            // compare each element of the list
            // with given element
            if (current.element == element)
            {
                return count;
            }
            count++;
            current = current.next;
        }
        // not found
        return -1;
    }

    // checks the list for empty
    isEmpty()
    {
        return this.size == 0;
    }

    // gives the size of the list
    size_of_list()
    {
        return this.size;
    }

    // prints the list items
    printList()
    {
        let curr = this.head;
        let str = "";
        print("");
        while (curr)
        {
            print(curr.element)
            print(" ");
            curr = curr.next;
        }
        print("\n")
    }
}

let ll = new LinkedList();
// should be true
println(ll.isEmpty());
ll.add(10);
ll.printList();
println(ll.size_of_list());
ll.add(20);
ll.add(30);
ll.add(40);
ll.add(50);
println("ll=", JSON.stringify(ll))
ll.printList();
println("is element removed? ", ll.removeElement(50));
ll.printList();
println("Index of 40 ", ll.indexOf(40));
ll.insertAt(60, 2);

ll.printList();
println("is List Empty? ", ll.isEmpty());
println(ll.removeFrom(3));
ll.printList();
