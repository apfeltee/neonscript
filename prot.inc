/* allocator.c */
void nn_allocator_init(void);
void *nn_allocuser_malloc(size_t bytes);
void nn_allocuser_free(void *mem);
void *nn_allocuser_calloc(size_t n_elements, size_t elem_size);
void *nn_allocuser_realloc(void *oldmem, size_t bytes);
void *nn_allocuser_memalign(size_t alignment, size_t bytes);
void **nn_allocuser_independentcalloc(size_t n_elements, size_t elem_size, void *chunks[]);
void **nn_allocuser_independentcomalloc(size_t n_elements, size_t sizes[], void *chunks[]);
void *nn_allocuser_valloc(size_t bytes);
void *nn_allocuser_pvalloc(size_t bytes);
int nn_allocuser_malloctrim(size_t pad);
size_t nn_allocuser_getfootprint(void);
size_t nn_allocuser_getmaxfootprint(void);
nnallocmallocinfo_t nn_allocuser_mallinfo(void);
void nn_allocuser_mallocstats(void);
size_t nn_allocuser_usablesize(void *mem);
int nn_allocuser_mallopt(int param_number, int value);
nnallocmspace_t *nn_allocator_mspacecreate(size_t capacity, int locked);
nnallocmspace_t *nn_allocator_mspacecreatewithbase(void *base, size_t capacity, int locked);
size_t nn_allocator_mspacedestroy(nnallocmspace_t *msp);
void *nn_allocator_mspacemalloc(nnallocmspace_t *msp, size_t bytes);
void nn_allocator_mspacefree(nnallocmspace_t *msp, void *mem);
void *nn_allocator_mspacecalloc(nnallocmspace_t *msp, size_t n_elements, size_t elem_size);
void *nn_allocator_mspacerealloc(nnallocmspace_t *msp, void *oldmem, size_t bytes);
void *nn_allocator_mspacememalign(nnallocmspace_t *msp, size_t alignment, size_t bytes);
void **nn_allocator_mspaceindependentcalloc(nnallocmspace_t *msp, size_t n_elements, size_t elem_size, void *chunks[]);
void **nn_allocator_mspaceindependentcomalloc(nnallocmspace_t *msp, size_t n_elements, size_t sizes[], void *chunks[]);
int nn_allocator_mspacetrim(nnallocmspace_t *msp, size_t pad);
void nn_allocator_mspacemallocstats(nnallocmspace_t *msp);
size_t nn_allocator_mspacefootprint(nnallocmspace_t *msp);
size_t nn_allocator_mspacemaxfootprint(nnallocmspace_t *msp);
nnallocmallocinfo_t nn_allocator_mspacemallinfo(nnallocmspace_t *msp);
int nn_allocator_mspacemallopt(int param_number, int value);
/* lino.c */
int lino_util_strcasecmp(const char *s1, const char *s2);
int lino_util_strncasecmp(const char *s1, const char *s2, int n);
size_t lino_util_defaultprevcharlen(const char *buf, size_t buflen, size_t pos, size_t *collen);
size_t lino_util_defaultnextcharlen(const char *buf, size_t buflen, size_t pos, size_t *collen);
size_t lino_util_defaultreadcode(int fd, char *buf, size_t buflen, int *c);
void lino_setencodingfunctions(linofnprevcharlenfunc_t *prevCharLenFunc, linofnnextcharlenfunc_t *nextCharLenFunc, linofnreadcodefunc_t *readCodeFunc);
size_t lino_util_columnpos(const char *buf, size_t buflen, size_t pos);
size_t lino_util_columnposformultiline(const char *buf, size_t buflen, size_t pos, size_t cols, size_t ini_pos);
void lino_maskmodeenable(void);
void lino_maskmodedisable(void);
void lino_setmultiline(int ml);
int lino_util_isunsupportedterm(void);
int lino_util_enablerawmode(int fd);
void lino_util_disablerawmode(int fd);
int lino_util_getcursorposition(int ifd, int ofd);
int lino_util_getcolumns(int ifd, int ofd);
void lino_clearscreen(void);
void lino_util_beep(void);
void lino_freecompletions(linocompletions_t *lc);
int lino_completeline(linostate_t *ls, char *cbuf, size_t cbuflen, int *c);
void lino_setcompletioncallback(linofncompletionfunc_t *fn);
void lino_sethintscallback(linofnhintsfunc_t *fn);
void lino_setfreehintscallback(linofnfreehintsfunc_t *fn);
void lino_addcompletion(linocompletions_t *lc, const char *str);
void lino_appendbuf_init(linobuffer_t *ab);
void lino_appendbuf_append(linobuffer_t *ab, const char *s, int len);
void lino_appendbuf_destroy(linobuffer_t *ab);
void lino_refreshshowhints(linobuffer_t *ab, linostate_t *l, int pcollen);
int lino_util_isansiescape(const char *buf, size_t buflen, size_t *len);
size_t lino_util_prompttextcolumnlen(const char *prompt, size_t plen);
void lino_util_refreshsingleline(linostate_t *l);
void lino_util_refreshmultiline(linostate_t *l);
void lino_refreshline(linostate_t *l);
int lino_editinsert(linostate_t *l, const char *cbuf, int clen);
void lino_editmoveleft(linostate_t *l);
void lino_editmoveright(linostate_t *l);
void lino_editmovehome(linostate_t *l);
void lino_edit_moveend(linostate_t *l);
void lino_edithistorynext(linostate_t *l, int dir);
void lino_editdelete(linostate_t *l);
void lino_editbackspace(linostate_t *l);
void lino_editdelprevword(linostate_t *l);
int lino_editline(int stdin_fd, int stdout_fd, char *buf, size_t buflen, const char *prompt);
void lino_printkeycodes(void);
int lino_util_getraw(char *buf, size_t buflen, const char *prompt);
char *lino_notty(void);
char *lino_readline(const char *prompt);
void lino_freeline(void *ptr);
void lino_freehistory(void);
void lino_atexit(void);
int lino_historyadd(const char *line);
int lino_historysetmaxlength(int len);
int lino_historysavetofile(const char *filename);
int lino_historyloadfromfile(const char *filename);
/* main.c */
void mrx_context_destroy(RegexContext *ctx);
void mrx_context_seterror(RegexContext *ctx, const char *fmt, ...);
void nn_utf8iter_init(utf8iterator_t *iter, const char *ptr, uint32_t length);
uint8_t nn_utf8iter_charsize(const char *character);
uint32_t nn_utf8iter_converter(const char *character, uint8_t size);
uint8_t nn_utf8iter_next(utf8iterator_t *iter);
const char *nn_utf8iter_getchar(utf8iterator_t *iter);
bool nn_value_isobject(NNValue v);
NNObject *nn_value_asobject(NNValue v);
bool nn_value_isobjtype(NNValue v, NNObjType t);
bool nn_value_isnull(NNValue v);
bool nn_value_isbool(NNValue v);
bool nn_value_isnumber(NNValue v);
bool nn_value_isstring(NNValue v);
bool nn_value_isfuncnative(NNValue v);
bool nn_value_isfuncscript(NNValue v);
bool nn_value_isfuncclosure(NNValue v);
bool nn_value_isfuncbound(NNValue v);
bool nn_value_isclass(NNValue v);
bool nn_value_isinstance(NNValue v);
bool nn_value_isarray(NNValue v);
bool nn_value_isdict(NNValue v);
bool nn_value_isfile(NNValue v);
bool nn_value_isrange(NNValue v);
bool nn_value_ismodule(NNValue v);
bool nn_value_iscallable(NNValue v);
NNObjType nn_value_objtype(NNValue v);
bool nn_value_asbool(NNValue v);
double nn_value_asnumber(NNValue v);
NNObjString *nn_value_asstring(NNValue v);
NNObjFunction *nn_value_asfunction(NNValue v);
NNObjClass *nn_value_asclass(NNValue v);
NNObjInstance *nn_value_asinstance(NNValue v);
NNObjSwitch *nn_value_asswitch(NNValue v);
NNObjUserdata *nn_value_asuserdata(NNValue v);
NNObjModule *nn_value_asmodule(NNValue v);
NNObjArray *nn_value_asarray(NNValue v);
NNObjDict *nn_value_asdict(NNValue v);
NNObjFile *nn_value_asfile(NNValue v);
NNObjRange *nn_value_asrange(NNValue v);
NNValue nn_value_makenull(void);
NNValue nn_value_makebool(bool b);
NNValue nn_value_makenumber(double d);
NNValue nn_value_makeint(int i);
NNValue nn_value_fromobject_actual(NNObject *obj);
NNValue nn_value_copystrlen(NNState *state, const char *str, size_t len);
NNValue nn_value_copystr(NNState *state, const char *str);
NNValArray *nn_valarray_make(NNState *state);
void nn_valarray_destroy(NNValArray *list, bool actuallydelete);
void nn_valtable_init(NNState *state, NNHashValTable *tab);
void nn_valtable_destroy(NNHashValTable *table);
NNHashValEntry *nn_valtable_findentrybyvalue(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue key);
NNHashValEntry *nn_valtable_findentrybystr(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyvalue(NNHashValTable *table, NNValue key);
NNProperty *nn_valtable_getfieldbystr(NNHashValTable *table, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyostr(NNHashValTable *table, NNObjString *str);
NNProperty *nn_valtable_getfieldbycstr(NNHashValTable *table, const char *kstr);
NNProperty *nn_valtable_getfield(NNHashValTable *table, NNValue key);
bool nn_valtable_get(NNHashValTable *table, NNValue key, NNValue *value);
bool nn_valtable_adjustcapacity(NNHashValTable *table, int capacity);
bool nn_valtable_setwithtype(NNHashValTable *table, NNValue key, NNValue value, NNFieldType ftyp, bool keyisstring);
bool nn_valtable_set(NNHashValTable *table, NNValue key, NNValue value);
bool nn_valtable_delete(NNHashValTable *table, NNValue key);
bool nn_valtable_addall(NNHashValTable *from, NNHashValTable *to, bool keepgoing);
void nn_valtable_importall(NNHashValTable *from, NNHashValTable *to);
bool nn_valtable_copy(NNHashValTable *from, NNHashValTable *to);
NNObjString *nn_valtable_findstring(NNHashValTable *table, const char *chars, size_t length, uint32_t hsv);
NNValue nn_valtable_findkey(NNHashValTable *table, NNValue value);
NNObjArray *nn_valtable_getkeys(NNHashValTable *table);
void nn_valtable_mark(NNState *state, NNHashValTable *table);
void nn_valtable_removewhites(NNState *state, NNHashValTable *table);
NNObject *nn_gcmem_protect(NNState *state, NNObject *object);
void nn_gcmem_clearprotect(NNState *state);
const char *nn_util_color(NNColor tc);
char *nn_util_strndup(const char *src, size_t len);
char *nn_util_strdup(const char *src);
char *nn_util_filereadhandle(NNState *state, FILE *hnd, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filereadfile(NNState *state, const char *filename, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filegetshandle(char *s, int size, FILE *f, size_t *lendest);
int nn_util_filegetlinehandle(char **lineptr, size_t *destlen, FILE *hnd);
int nn_util_utf8numbytes(int value);
char *nn_util_utf8encode(unsigned int code, size_t *dlen);
int nn_util_utf8decode(const uint8_t *bytes, uint32_t length);
char *nn_util_utf8codepoint(const char *str, char *outcodepoint);
char *nn_util_utf8strstr(const char *haystack, const char *needle);
char *nn_util_utf8index(char *s, int pos);
void nn_util_utf8slice(char *s, int *start, int *end);
char *nn_util_strtoupper(char *str, size_t length);
char *nn_util_strtolower(char *str, size_t length);
void nn_gcmem_maybecollect(NNState *state, int addsize, bool wasnew);
void *nn_gcmem_reallocate(NNState *state, void *pointer, size_t oldsize, size_t newsize, bool retain);
void *nn_gcmem_allocate(NNState *state, size_t size, size_t amount, bool retain);
void nn_gcmem_release(NNState *state, void *pointer, size_t oldsize);
void nn_gcmem_markobject(NNState *state, NNObject *object);
void nn_gcmem_markvalue(NNState *state, NNValue value);
void nn_gcmem_blackenobject(NNState *state, NNObject *object);
void nn_object_destroy(NNState *state, NNObject *object);
void nn_gcmem_markroots(NNState *state);
void nn_gcmem_tracerefs(NNState *state);
void nn_gcmem_sweep(NNState *state);
void nn_gcmem_destroylinkedobjects(NNState *state);
void nn_gcmem_collectgarbage(NNState *state);
NNValue nn_argcheck_vfail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, va_list va);
NNValue nn_argcheck_fail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, ...);
void nn_argcheck_init(NNState *state, NNArgCheck *ch, const char *name, NNValue *argv, size_t argc);
void nn_dbg_disasmblob(NNPrinter *pr, NNBlob *blob, const char *name);
void nn_dbg_printinstrname(NNPrinter *pr, const char *name);
int nn_dbg_printsimpleinstr(NNPrinter *pr, const char *name, int offset);
int nn_dbg_printconstinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printpropertyinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printshortinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printbyteinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printjumpinstr(NNPrinter *pr, const char *name, int sign, NNBlob *blob, int offset);
int nn_dbg_printtryinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinvokeinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
const char *nn_dbg_op2str(uint8_t instruc);
int nn_dbg_printclosureinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinstructionat(NNPrinter *pr, NNBlob *blob, int offset);
void nn_blob_init(NNState *state, NNBlob *blob);
void nn_blob_push(NNBlob *blob, NNInstruction ins);
void nn_blob_destroy(NNBlob *blob);
int nn_blob_pushconst(NNBlob *blob, NNValue value);
NNProperty nn_property_makewithpointer(NNState *state, NNValue val, NNFieldType type);
NNProperty nn_property_makewithgetset(NNState *state, NNValue val, NNValue getter, NNValue setter, NNFieldType type);
NNProperty nn_property_make(NNState *state, NNValue val, NNFieldType type);
void nn_valtable_print(NNState *state, NNPrinter *pr, NNHashValTable *table, const char *name);
void nn_printer_initvars(NNState *state, NNPrinter *pr, NNPrMode mode);
NNPrinter *nn_printer_makeundefined(NNState *state, NNPrMode mode);
NNPrinter *nn_printer_makeio(NNState *state, FILE *fh, bool shouldclose);
NNPrinter *nn_printer_makestring(NNState *state);
void nn_printer_makestackio(NNState *state, NNPrinter *pr, FILE *fh, bool shouldclose);
void nn_printer_makestackstring(NNState *state, NNPrinter *pr);
void nn_printer_destroy(NNPrinter *pr);
NNObjString *nn_printer_takestring(NNPrinter *pr);
NNObjString *nn_printer_copystring(NNPrinter *pr);
bool nn_printer_writestringl(NNPrinter *pr, const char *estr, size_t elen);
bool nn_printer_writestring(NNPrinter *pr, const char *estr);
bool nn_printer_writechar(NNPrinter *pr, int b);
bool nn_printer_writeescapedchar(NNPrinter *pr, int ch);
bool nn_printer_writequotedstring(NNPrinter *pr, const char *str, size_t len, bool withquot);
bool nn_printer_vwritefmttostring(NNPrinter *pr, const char *fmt, va_list va);
bool nn_printer_vwritefmt(NNPrinter *pr, const char *fmt, va_list va);
bool nn_printer_printf(NNPrinter *pr, const char *fmt, ...);
void nn_printer_printfunction(NNPrinter *pr, NNObjFunction *func);
void nn_printer_printarray(NNPrinter *pr, NNObjArray *list);
void nn_printer_printdict(NNPrinter *pr, NNObjDict *dict);
void nn_printer_printfile(NNPrinter *pr, NNObjFile *file);
void nn_printer_printinstance(NNPrinter *pr, NNObjInstance *instance, bool invmethod);
void nn_printer_printtable(NNPrinter *pr, NNHashValTable *table);
void nn_printer_printobjclass(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
void nn_printer_printobject(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
void nn_printer_printnumber(NNPrinter *pr, NNValue value);
void nn_printer_printvalue(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
NNObjString *nn_value_tostring(NNState *state, NNValue value);
const char *nn_value_objecttypename(NNObject *object);
const char *nn_value_typename(NNValue value);
const char *nn_value_typefromfunction(NNValIsFuncFN func);
bool nn_value_compobject(NNState *state, NNValue a, NNValue b);
bool nn_value_compare_actual(NNState *state, NNValue a, NNValue b);
bool nn_value_compare(NNState *state, NNValue a, NNValue b);
uint32_t nn_util_hashbits(uint64_t hs);
uint32_t nn_util_hashdouble(double value);
uint32_t nn_util_hashstring(const char *str, size_t length);
uint32_t nn_object_hashobject(NNObject *object);
uint32_t nn_value_hashvalue(NNValue value);
NNValue nn_value_findgreater(NNValue a, NNValue b);
void nn_value_sortvalues(NNState *state, NNValue *values, int count);
NNValue nn_value_copyvalue(NNState *state, NNValue value);
NNObject *nn_object_allocobject(NNState *state, size_t size, NNObjType type, bool retain);
NNObjUserdata *nn_object_makeuserdata(NNState *state, void *pointer, const char *name);
NNObjModule *nn_module_make(NNState *state, const char *name, const char *file, bool imported, bool retain);
void nn_module_destroy(NNState *state, NNObjModule *module);
void nn_module_setfilefield(NNState *state, NNObjModule *module);
NNObjSwitch *nn_object_makeswitch(NNState *state);
NNObjArray *nn_object_makearray(NNState *state);
NNObjRange *nn_object_makerange(NNState *state, int lower, int upper);
NNObjDict *nn_object_makedict(NNState *state);
NNObjFile *nn_object_makefile(NNState *state, FILE *handle, bool isstd, const char *path, const char *mode);
void nn_file_destroy(NNObjFile *file);
void nn_file_mark(NNObjFile *file);
bool nn_file_read(NNObjFile *file, size_t readhowmuch, NNIOResult *dest);
NNObjFunction *nn_object_makefuncbound(NNState *state, NNValue receiver, NNObjFunction *method);
NNObjClass *nn_object_makeclass(NNState *state, NNObjString *name, NNObjClass *parent);
void nn_class_destroy(NNObjClass *klass);
bool nn_class_inheritfrom(NNObjClass *subclass, NNObjClass *superclass);
bool nn_class_defproperty(NNObjClass *klass, NNObjString *cstrname, NNValue val);
bool nn_class_defcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_setstaticproperty(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativeconstructorptr(NNObjClass *klass, NNNativeFN function, void *uptr);
bool nn_class_defnativeconstructor(NNObjClass *klass, NNNativeFN function);
bool nn_class_defmethod(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *ptr);
bool nn_class_defnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
NNProperty *nn_class_getmethodfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getpropertyfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticproperty(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticmethodfield(NNObjClass *klass, NNObjString *name);
NNObjInstance *nn_object_makeinstance(NNState *state, NNObjClass *klass);
void nn_instance_mark(NNObjInstance *instance);
void nn_instance_destroy(NNObjInstance *instance);
bool nn_instance_defproperty(NNObjInstance *instance, NNObjString *name, NNValue val);
NNObjFunction *nn_object_makefuncscript(NNState *state, NNObjModule *module, NNFuncContextType type);
void nn_funcscript_destroy(NNObjFunction *function);
NNObjFunction *nn_object_makefuncnative(NNState *state, NNNativeFN function, const char *name, void *uptr);
NNObjFunction *nn_object_makefuncclosure(NNState *state, NNObjFunction *function);
NNObjString *nn_string_makefromstrbuf(NNState *state, StringBuffer *sbuf, uint32_t hsv);
size_t nn_string_getlength(NNObjString *os);
const char *nn_string_getdata(NNObjString *os);
const char *nn_string_getcstr(NNObjString *os);
void nn_string_destroy(NNState *state, NNObjString *str);
NNObjString *nn_string_internlen(NNState *state, const char *chars, int length);
NNObjString *nn_string_intern(NNState *state, const char *chars);
NNObjString *nn_string_takelen(NNState *state, char *chars, int length);
NNObjString *nn_string_takecstr(NNState *state, char *chars);
NNObjString *nn_string_copylen(NNState *state, const char *chars, int length);
NNObjString *nn_string_copycstr(NNState *state, const char *chars);
NNObjString *nn_string_copyobject(NNState *state, NNObjString *origos);
NNObjUpvalue *nn_object_makeupvalue(NNState *state, NNValue *slot, int stackpos);
void nn_astlex_init(NNAstLexer *lex, NNState *state, const char *source);
NNAstLexer *nn_astlex_make(NNState *state, const char *source);
void nn_astlex_destroy(NNState *state, NNAstLexer *lex);
bool nn_astlex_isatend(NNAstLexer *lex);
NNAstToken nn_astlex_createtoken(NNAstLexer *lex, NNAstTokType type);
NNAstToken nn_astlex_errortoken(NNAstLexer *lex, const char *fmt, ...);
bool nn_astutil_isdigit(char c);
bool nn_astutil_isbinary(char c);
bool nn_astutil_isalpha(char c);
bool nn_astutil_isoctal(char c);
bool nn_astutil_ishexadecimal(char c);
const char *nn_astutil_toktype2str(int t);
char nn_astlex_advance(NNAstLexer *lex);
bool nn_astlex_match(NNAstLexer *lex, char expected);
char nn_astlex_peekcurr(NNAstLexer *lex);
char nn_astlex_peekprev(NNAstLexer *lex);
char nn_astlex_peeknext(NNAstLexer *lex);
NNAstToken nn_astlex_skipblockcomments(NNAstLexer *lex);
NNAstToken nn_astlex_skipspace(NNAstLexer *lex);
NNAstToken nn_astlex_scanstring(NNAstLexer *lex, char quote, bool withtemplate, bool permitescapes);
NNAstToken nn_astlex_scannumber(NNAstLexer *lex);
NNAstTokType nn_astlex_getidenttype(NNAstLexer *lex);
NNAstToken nn_astlex_scanident(NNAstLexer *lex, bool isdollar);
NNAstToken nn_astlex_scandecorator(NNAstLexer *lex);
NNAstToken nn_astlex_scantoken(NNAstLexer *lex);
NNAstParser *nn_astparser_makeparser(NNState *state, NNAstLexer *lexer, NNObjModule *module, bool keeplast);
void nn_astparser_destroy(NNAstParser *parser);
NNBlob *nn_astparser_currentblob(NNAstParser *prs);
bool nn_astparser_raiseerroratv(NNAstParser *prs, NNAstToken *t, const char *message, va_list args);
bool nn_astparser_raiseerror(NNAstParser *prs, const char *message, ...);
bool nn_astparser_raiseerroratcurrent(NNAstParser *prs, const char *message, ...);
void nn_astparser_advance(NNAstParser *prs);
bool nn_astparser_consume(NNAstParser *prs, NNAstTokType t, const char *message);
void nn_astparser_consumeor(NNAstParser *prs, const char *message, const NNAstTokType *ts, int count);
bool nn_astparser_checknumber(NNAstParser *prs);
bool nn_astparser_istype(NNAstTokType prev, NNAstTokType t);
bool nn_astparser_check(NNAstParser *prs, NNAstTokType t);
bool nn_astparser_match(NNAstParser *prs, NNAstTokType t);
void nn_astparser_runparser(NNAstParser *parser);
void nn_astparser_parsedeclaration(NNAstParser *prs);
void nn_astparser_parsestmt(NNAstParser *prs);
void nn_astparser_consumestmtend(NNAstParser *prs);
void nn_astparser_ignorewhitespace(NNAstParser *prs);
int nn_astparser_getcodeargscount(const NNInstruction *bytecode, const NNValue *constants, int ip);
void nn_astemit_emit(NNAstParser *prs, uint8_t byte, int line, bool isop);
void nn_astemit_patchat(NNAstParser *prs, size_t idx, uint8_t byte);
void nn_astemit_emitinstruc(NNAstParser *prs, uint8_t byte);
void nn_astemit_emit1byte(NNAstParser *prs, uint8_t byte);
void nn_astemit_emit1short(NNAstParser *prs, uint16_t byte);
void nn_astemit_emit2byte(NNAstParser *prs, uint8_t byte, uint8_t byte2);
void nn_astemit_emitbyteandshort(NNAstParser *prs, uint8_t byte, uint16_t byte2);
void nn_astemit_emitloop(NNAstParser *prs, int loopstart);
void nn_astemit_emitreturn(NNAstParser *prs);
int nn_astparser_pushconst(NNAstParser *prs, NNValue value);
void nn_astemit_emitconst(NNAstParser *prs, NNValue value);
int nn_astemit_emitjump(NNAstParser *prs, uint8_t instruction);
int nn_astemit_emitswitch(NNAstParser *prs);
int nn_astemit_emittry(NNAstParser *prs);
void nn_astemit_patchswitch(NNAstParser *prs, int offset, int constant);
void nn_astemit_patchtry(NNAstParser *prs, int offset, int type, int address, int finally);
void nn_astemit_patchjump(NNAstParser *prs, int offset);
void nn_astfunccompiler_init(NNAstParser *prs, NNAstFuncCompiler *fnc, NNFuncContextType type, bool isanon);
int nn_astparser_makeidentconst(NNAstParser *prs, NNAstToken *name);
bool nn_astparser_identsequal(NNAstToken *a, NNAstToken *b);
int nn_astfunccompiler_resolvelocal(NNAstParser *prs, NNAstFuncCompiler *fnc, NNAstToken *name);
int nn_astfunccompiler_addupvalue(NNAstParser *prs, NNAstFuncCompiler *fnc, uint16_t index, bool islocal);
int nn_astfunccompiler_resolveupvalue(NNAstParser *prs, NNAstFuncCompiler *fnc, NNAstToken *name);
int nn_astparser_addlocal(NNAstParser *prs, NNAstToken name);
void nn_astparser_declarevariable(NNAstParser *prs);
int nn_astparser_parsevariable(NNAstParser *prs, const char *message);
void nn_astparser_markinitialized(NNAstParser *prs);
void nn_astparser_definevariable(NNAstParser *prs, int global);
NNAstToken nn_astparser_synthtoken(const char *name);
NNObjFunction *nn_astparser_endcompiler(NNAstParser *prs, bool istoplevel);
void nn_astparser_scopebegin(NNAstParser *prs);
bool nn_astutil_scopeendcancontinue(NNAstParser *prs);
void nn_astparser_scopeend(NNAstParser *prs);
int nn_astparser_discardlocals(NNAstParser *prs, int depth);
void nn_astparser_endloop(NNAstParser *prs);
bool nn_astparser_rulebinary(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_rulecall(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleliteral(NNAstParser *prs, bool canassign);
void nn_astparser_parseassign(NNAstParser *prs, uint8_t realop, uint8_t getop, uint8_t setop, int arg);
void nn_astparser_assignment(NNAstParser *prs, uint8_t getop, uint8_t setop, int arg, bool canassign);
bool nn_astparser_ruledot(NNAstParser *prs, NNAstToken previous, bool canassign);
void nn_astparser_namedvar(NNAstParser *prs, NNAstToken name, bool canassign);
void nn_astparser_createdvar(NNAstParser *prs, NNAstToken name);
bool nn_astparser_rulearray(NNAstParser *prs, bool canassign);
bool nn_astparser_ruledictionary(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleindexing(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_rulevarnormal(NNAstParser *prs, bool canassign);
bool nn_astparser_rulethis(NNAstParser *prs, bool canassign);
bool nn_astparser_rulesuper(NNAstParser *prs, bool canassign);
bool nn_astparser_rulegrouping(NNAstParser *prs, bool canassign);
NNValue nn_astparser_compilestrnumber(NNAstTokType type, const char *source);
NNValue nn_astparser_compilenumber(NNAstParser *prs);
bool nn_astparser_rulenumber(NNAstParser *prs, bool canassign);
int nn_astparser_readhexdigit(char c);
int nn_astparser_readhexescape(NNAstParser *prs, const char *str, int index, int count);
int nn_astparser_readunicodeescape(NNAstParser *prs, char *string, const char *realstring, int numberbytes, int realindex, int index);
char *nn_astparser_compilestring(NNAstParser *prs, int *length, bool permitescapes);
bool nn_astparser_rulestring(NNAstParser *prs, bool canassign);
bool nn_astparser_rulerawstring(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleinterpolstring(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleunary(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleand(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleor(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleinstanceof(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleconditional(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleimport(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenew(NNAstParser *prs, bool canassign);
bool nn_astparser_ruletypeof(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenothingprefix(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenothinginfix(NNAstParser *prs, NNAstToken previous, bool canassign);
NNAstRule *nn_astparser_putrule(NNAstRule *dest, NNAstParsePrefixFN prefix, NNAstParseInfixFN infix, NNAstPrecedence precedence);
NNAstRule *nn_astparser_getrule(NNAstTokType type);
bool nn_astparser_doparseprecedence(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseprecedence(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseprecnoadvance(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseexpression(NNAstParser *prs);
bool nn_astparser_parseblock(NNAstParser *prs);
void nn_astparser_declarefuncargvar(NNAstParser *prs);
int nn_astparser_parsefuncparamvar(NNAstParser *prs, const char *message);
uint8_t nn_astparser_parsefunccallargs(NNAstParser *prs);
void nn_astparser_parsefuncparamlist(NNAstParser *prs);
void nn_astfunccompiler_compilebody(NNAstParser *prs, NNAstFuncCompiler *fnc, bool closescope, bool isanon);
void nn_astparser_parsefuncfull(NNAstParser *prs, NNFuncContextType type, bool isanon);
void nn_astparser_parsemethod(NNAstParser *prs, NNAstToken classname, NNAstToken methodname, bool havenametoken, bool isstatic);
bool nn_astparser_ruleanonfunc(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleanonclass(NNAstParser *prs, bool canassign);
bool nn_astparser_parsefield(NNAstParser *prs, NNAstToken *nametokendest, bool *havenamedest, bool isstatic);
void nn_astparser_parsefuncdecl(NNAstParser *prs);
void nn_astparser_parseclassdeclaration(NNAstParser *prs, bool named);
void nn_astparser_parsevardecl(NNAstParser *prs, bool isinitializer, bool isconst);
void nn_astparser_parseexprstmt(NNAstParser *prs, bool isinitializer, bool semi);
void nn_astparser_parseforstmt(NNAstParser *prs);
void nn_astparser_parseforeachstmt(NNAstParser *prs);
void nn_astparser_parseswitchstmt(NNAstParser *prs);
void nn_astparser_parseifstmt(NNAstParser *prs);
void nn_astparser_parseechostmt(NNAstParser *prs);
void nn_astparser_parsethrowstmt(NNAstParser *prs);
void nn_astparser_parseassertstmt(NNAstParser *prs);
void nn_astparser_parsetrystmt(NNAstParser *prs);
void nn_astparser_parsereturnstmt(NNAstParser *prs);
void nn_astparser_parsewhilestmt(NNAstParser *prs);
void nn_astparser_parsedo_whilestmt(NNAstParser *prs);
void nn_astparser_parsecontinuestmt(NNAstParser *prs);
void nn_astparser_parsebreakstmt(NNAstParser *prs);
void nn_astparser_synchronize(NNAstParser *prs);
NNObjFunction *nn_astparser_compilesource(NNState *state, NNObjModule *module, const char *source, NNBlob *blob, bool fromimport, bool keeplast);
void nn_gcmem_markcompilerroots(NNState *state);
NNRegModule *nn_natmodule_load_null(NNState *state);
void nn_modfn_os_preloader(NNState *state);
NNValue nn_modfn_os_readdir(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNRegModule *nn_natmodule_load_os(NNState *state);
NNValue nn_modfn_astscan_scan(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNRegModule *nn_natmodule_load_astscan(NNState *state);
bool nn_import_loadnativemodule(NNState *state, NNModInitFN init_fn, char *importname, const char *source, void *dlw);
void nn_import_addnativemodule(NNState *state, NNObjModule *module, const char *as);
void nn_import_loadbuiltinmodules(NNState *state);
void nn_import_closemodule(void *hnd);
bool nn_util_fsfileexists(NNState *state, const char *filepath);
bool nn_util_fsfileistype(NNState *state, const char *filepath, int typ);
bool nn_util_fsfileisfile(NNState *state, const char *filepath);
bool nn_util_fsfileisdirectory(NNState *state, const char *filepath);
NNObjModule *nn_import_loadmodulescript(NNState *state, NNObjModule *intomodule, NNObjString *modulename);
char *nn_import_resolvepath(NNState *state, char *modulename, const char *currentfile, char *rootfile, bool isrelative);
char *nn_util_fsgetbasename(NNState *state, char *path);
NNValue nn_objfndict_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_add(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_set(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_clear(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_clone(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_compact(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_contains(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_extend(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_keys(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_values(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_remove(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_isempty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_findkey(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_tolist(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_filter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_some(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_every(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_reduce(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
int nn_fileobject_close(NNObjFile *file);
bool nn_fileobject_open(NNObjFile *file);
NNValue nn_objfnfile_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_exists(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isdirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readstatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_writestatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_statstatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_close(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_open(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isopen(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isclosed(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readmethod(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readline(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_gets(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_write(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_puts(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_printf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_number(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_istty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_flush(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_util_statfilldictphysfile(NNObjDict *dict, struct stat *st);
NNValue nn_objfnfile_statmethod(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_path(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_mode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_name(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_seek(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_tell(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNObjArray *nn_array_makefilled(NNState *state, size_t cnt, NNValue filler);
NNObjArray *nn_array_make(NNState *state);
void nn_array_push(NNObjArray *list, NNValue value);
bool nn_array_get(NNObjArray *list, size_t idx, NNValue *vdest);
NNObjArray *nn_array_copy(NNObjArray *list, long start, long length);
NNValue nn_objfnarray_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_append(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_clear(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_clone(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_count(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_extend(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_indexof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_insert(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_pop(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_shift(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_removeat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_remove(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_reverse(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_sort(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_contains(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_delete(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_first(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_last(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_isempty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_take(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_compact(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_unique(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_zip(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_zipfrom(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_todict(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_map(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_filter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_some(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_every(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_reduce(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_slice(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_lower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_upper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_range(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_expand(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8numbytes(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8decode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8encode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_util_stringutf8chars(NNState *state, NNValue thisval, NNValue *argv, size_t argc, bool onlycodepoint);
NNValue nn_objfnstring_utf8chars(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8codepoints(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_fromcharcode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_string_fromrange(NNState *state, const char *buf, int len);
NNObjString *nn_string_substring(NNState *state, NNObjString *selfstr, size_t start, size_t end, bool likejs);
NNValue nn_objfnstring_substring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_charcodeat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_charat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_upper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_lower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isalpha(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isalnum(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isfloat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isnumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_islower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isupper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isspace(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_trim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_ltrim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_rtrim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_join(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_indexof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_startswith(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_endswith(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_util_stringregexmatch(NNState *state, NNObjString *string, NNObjString *pattern, bool capture);
NNValue nn_objfnstring_matchcapture(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_matchonly(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_count(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_tonumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isascii(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_tolist(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_lpad(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_rpad(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_split(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_replace(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_dumpself(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_tostring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_typename(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_getselfclass(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isarray(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isa(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_iscallable(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isbool(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isnumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isint(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isdict(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isobject(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isfunction(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isiterable(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isclass(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isinstance(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnclass_getselfname(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNObjString *nn_util_numbertobinstring(NNState *state, long n);
NNObjString *nn_util_numbertooctstring(NNState *state, int64_t n, bool numeric);
NNObjString *nn_util_numbertohexstring(NNState *state, int64_t n, bool numeric);
NNValue nn_objfnnumber_tobinstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_tooctstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_tohexstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_abs(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_round(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_sqrt(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_ceil(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_floor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_min(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_exedirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_scriptfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_scriptdirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_exit(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_kill(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnjson_stringify(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_state_installmethods(NNState *state, NNObjClass *klass, NNConstClassMethodItem *listmethods);
void nn_state_initbuiltinmethods(NNState *state);
NNValue nn_nativefn_time(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_microtime(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_id(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_int(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_chr(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_ord(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_util_mtseed(uint32_t seed, uint32_t *binst, uint32_t *index);
uint32_t nn_util_mtgenerate(uint32_t *binst, uint32_t *index);
double nn_util_mtrand(double lowerlimit, double upperlimit);
NNValue nn_nativefn_rand(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_eval(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_instanceof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_strformat_init(NNState *state, NNFormatInfo *nfi, NNPrinter *writer, const char *fmtstr, size_t fmtlen);
void nn_strformat_destroy(NNFormatInfo *nfi);
bool nn_strformat_format(NNFormatInfo *nfi, int argc, int argbegin, NNValue *argv);
NNValue nn_nativefn_sprintf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_printf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_print(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_println(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_isnan(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_state_initbuiltinfunctions(NNState *state);
void nn_state_vwarn(NNState *state, const char *fmt, va_list va);
void nn_state_warn(NNState *state, const char *fmt, ...);
NNValue nn_except_getstacktrace(NNState *state);
bool nn_except_propagate(NNState *state);
bool nn_except_pushhandler(NNState *state, NNObjClass *type, int address, int finallyaddress);
bool nn_except_vthrowactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, va_list va);
bool nn_except_throwactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_throwwithclass(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_vthrowwithclass(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, const char *format, va_list args);
NNInstruction nn_util_makeinst(bool isop, uint8_t code, int srcline);
NNObjClass *nn_except_makeclass(NNState *state, NNObjModule *module, const char *cstrname, bool iscs);
NNObjInstance *nn_except_makeinstance(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, NNObjString *message);
void nn_vm_raisefatalerror(NNState *state, const char *format, ...);
bool nn_state_defglobalvalue(NNState *state, const char *name, NNValue val);
bool nn_state_defnativefunctionptr(NNState *state, const char *name, NNNativeFN fptr, void *uptr);
bool nn_state_defnativefunction(NNState *state, const char *name, NNNativeFN fptr);
NNObjClass *nn_util_makeclass(NNState *state, const char *name, NNObjClass *parent);
void nn_vm_initvmstate(NNState *state);
bool nn_vm_resizestack(NNState *state, NNObjFunction *closure, size_t needed);
bool nn_vm_resizeframes(NNState *state, NNObjFunction *closure, size_t needed);
bool nn_vm_checkmayberesize(NNState *state);
void nn_vm_resizeinfo(NNState *state, const char *context, NNObjFunction *closure, size_t needed);
void nn_state_resetvmstate(NNState *state);
bool nn_state_addsearchpathobj(NNState *state, NNObjString *os);
bool nn_state_addsearchpath(NNState *state, const char *path);
void nn_state_buildprocessinfo(NNState *state);
void nn_state_updateprocessinfo(NNState *state);
bool nn_state_makestack(NNState *pstate);
NNState *nn_state_makealloc(void);
bool nn_state_makewithuserptr(NNState *pstate, void *userptr);
void nn_state_destroy(NNState *state, bool onstack);
bool nn_util_methodisprivate(NNObjString *name);
bool nn_vm_callclosure(NNState *state, NNObjFunction *closure, NNValue thisval, int argcount);
bool nn_vm_callnative(NNState *state, NNObjFunction *native, NNValue thisval, int argcount);
bool nn_vm_callvaluewithobject(NNState *state, NNValue callable, NNValue thisval, int argcount);
bool nn_vm_callvalue(NNState *state, NNValue callable, NNValue thisval, int argcount);
NNFuncContextType nn_value_getmethodtype(NNValue method);
NNObjClass *nn_value_getclassfor(NNState *state, NNValue receiver);
void nn_vm_stackpush(NNState *state, NNValue value);
NNValue nn_vm_stackpop(NNState *state);
NNValue nn_vm_stackpopn(NNState *state, int n);
NNValue nn_vm_stackpeek(NNState *state, int distance);
bool nn_value_isfalse(NNValue value);
bool nn_util_isinstanceof(NNObjClass *klass1, NNObjClass *expected);
bool nn_dict_setentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentrycstr(NNObjDict *dict, const char *ckey, NNValue value);
NNProperty *nn_dict_getentry(NNObjDict *dict, NNValue key);
NNObjDict *nn_dict_copy(NNObjDict *dict);
void nn_vmdebug_printvalue(NNState *state, NNValue val, const char *fmt, ...);
NNStatus nn_vm_runvm(NNState *state, int exitframe, NNValue *rv);
int nn_nestcall_prepare(NNState *state, NNValue callable, NNValue mthobj, NNValue *callarr, int maxcallarr);
bool nn_nestcall_callfunction(NNState *state, NNValue callable, NNValue thisval, NNValue *argv, size_t argc, NNValue *dest);
NNObjFunction *nn_state_compilesource(NNState *state, NNObjModule *module, bool fromeval, const char *source, bool toplevel);
NNStatus nn_state_execsource(NNState *state, NNObjModule *module, const char *source, const char *filename, NNValue *dest);
NNValue nn_state_evalsource(NNState *state, const char *source);
char *nn_cli_getinput(const char *prompt);
void nn_cli_addhistoryline(const char *line);
void nn_cli_freeline(char *line);
bool nn_cli_repl(NNState *state);
bool nn_cli_runfile(NNState *state, const char *file);
bool nn_cli_runcode(NNState *state, char *source);
int nn_util_findfirstpos(const char *str, size_t len, int ch);
void nn_cli_parseenv(NNState *state, char **envp);
void nn_cli_printtypesizes(void);
void optprs_fprintmaybearg(FILE *out, const char *begin, const char *flagname, size_t flaglen, bool needval, bool maybeval, const char *delim);
void optprs_fprintusage(FILE *out, optlongflags_t *flags);
void nn_cli_showusage(char *argv[], optlongflags_t *flags, bool fail);
int main(int argc, char *argv[], char **envp);
int replmain(const char *file);
/* mem.c */
void nn_memory_init(void);
void nn_memory_finish(void);
void *nn_memory_setsize(void *p, size_t sz);
size_t nn_memory_getsize(void *p);
void *nn_memory_malloc(size_t sz);
void *nn_memory_realloc(void *p, size_t nsz);
void *nn_memory_calloc(size_t count, size_t typsize);
void nn_memory_free(void *ptr);
/* optparse.c */
int optprs_makeerror(optcontext_t *ox, const char *msg, const char *data);
bool optbits_isdashdash(const char *arg);
bool optbits_isshortopt(const char *arg);
bool optbits_islongopt(const char *arg);
void optbits_permute(optcontext_t *ox, int index);
int optbits_getargtype(const char *optstring, char c);
bool optbits_islongoptsend(const optlongflags_t *longopts, int i);
void optbits_fromlong(const optlongflags_t *longopts, char *optstring);
bool optbits_matchlongopts(const char *longname, const char *option);
char *optbits_getlongoptsarg(char *option);
int optbits_longfallback(optcontext_t *ox, const optlongflags_t *longopts, int *longindex);
void optprs_init(optcontext_t *ox, int argc, char **argv);
int optprs_nextshortflag(optcontext_t *ox, const char *optstring);
int optprs_nextlongflag(optcontext_t *ox, const optlongflags_t *longopts, int *longindex);
char *optprs_nextpositional(optcontext_t *ox);
/* os.c */
char *osfn_utilstrndup(const char *src, size_t len);
char *osfn_utilstrdup(const char *src);
bool fslib_diropen(FSDirReader *rd, const char *path);
bool fslib_dirread(FSDirReader *rd, FSDirItem *itm);
bool fslib_dirclose(FSDirReader *rd);
FILE *osfn_popen(const char *cmd, const char *type);
void osfn_pclose(FILE *fh);
int osfn_chmod(const char *path, int mode);
char *osfn_realpath(const char *path, char *respath);
char *osfn_dirname(const char *fname);
char *osfn_fallbackbasename(const char *opath);
char *osfn_basename(const char *path);
int osfn_isatty(int fd);
int osfn_symlink(const char *path1, const char *path2);
int osfn_symlinkat(const char *path1, int fd, const char *path2);
char *osfn_getcwd(char *buf, size_t size);
int osfn_lstat(const char *path, struct stat *buf);
int osfn_truncate(const char *path, size_t length);
unsigned int osfn_sleep(unsigned int seconds);
int osfn_gettimeofday(struct timeval *tp, void *tzp);
int osfn_mkdir(const char *path, size_t mode);
int osfn_chdir(const char *path);
int osfn_getpid(void);
int osfn_kill(int pid, int code);
/* strbuf.c */
size_t dyn_strutil_rndup2pow64(uint64_t x);
char *dyn_strutil_safencpy(char *dst, const char *src, size_t n);
size_t dyn_strutil_splitstr(char *str, char sep, char **ptrs, size_t nptrs);
size_t dyn_strutil_charreplace(char *str, char from, char to);
void dyn_strutil_reverseregion(char *str, size_t length);
bool dyn_strutil_isallspace(const char *s);
char *dyn_strutil_nextspace(char *s);
char *dyn_strutil_trim(char *str);
size_t dyn_strutil_chomp(char *str, size_t len);
size_t dyn_strutil_countchar(const char *str, char c);
size_t dyn_strutil_split(const char *splitat, const char *sourcetxt, char ***result);
void dyn_strutil_callboundscheckinsert(const StringBuffer *sbuf, size_t pos, const char *file, int line);
void dyn_strutil_callboundscheckreadrange(const StringBuffer *sbuf, size_t start, size_t len, const char *file, int line);
StringBuffer *dyn_strbuf_makefromptr(StringBuffer *sbuf, size_t len);
bool dyn_strbuf_initbasicempty(StringBuffer *sbuf, size_t len, bool onstack);
bool dyn_strbuf_makebasicemptystack(StringBuffer *sbuf, size_t len);
StringBuffer *dyn_strbuf_makebasicempty(size_t len);
bool dyn_strbuf_destroyfromstack(StringBuffer *sb);
bool dyn_strbuf_destroy(StringBuffer *sb);
bool dyn_strbuf_destroyfromptr(StringBuffer *sb);
StringBuffer *dyn_strbuf_makefromstring(const char *str, size_t slen);
StringBuffer *dyn_strbuf_makeclone(const StringBuffer *sbuf);
void dyn_strbuf_reset(StringBuffer *sb);
void dyn_strutil_cbufcapacity(char **buf, size_t *sizeptr, size_t len);
void dyn_strutil_cbufappendchar(char **buf, size_t *lenptr, size_t *sizeptr, char c);
bool dyn_strbuf_resize(StringBuffer *sbuf, size_t newlen);
void dyn_strbuf_ensurecapacity(StringBuffer *sb, size_t len);
void dyn_strbuf_ensurecapacityupdateptr(StringBuffer *sbuf, size_t size, const char **ptr);
bool dyn_strbuf_containschar(StringBuffer *sb, char ch);
void dyn_strutil_faststrncat(char *dest, const char *src, size_t *size);
size_t dyn_strutil_strreplace1(char **str, size_t selflen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
size_t dyn_strutil_strrepcount(const char *str, size_t slen, const char *findstr, size_t findlen, size_t sublen);
void dyn_strutil_strreplace2(char *target, size_t tgtlen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool dyn_strbuf_fullreplace(StringBuffer *sb, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool dyn_strutil_inpreplhelper(char *dest, const char *src, size_t srclen, int findme, const char *substr, size_t sublen, size_t maxlen, size_t *dlen);
size_t dyn_strutil_inpreplace(char *target, size_t tgtlen, int findme, const char *substr, size_t sublen, size_t maxlen);
bool dyn_strbuf_charreplace(StringBuffer *sb, int findme, const char *substr, size_t sublen);
void dyn_strbuf_set(StringBuffer *sb, const char *str);
void dyn_strbuf_setbuff(StringBuffer *dest, StringBuffer *from);
bool dyn_strbuf_appendchar(StringBuffer *sb, int c);
bool dyn_strbuf_appendstrn(StringBuffer *sb, const char *str, size_t len);
bool dyn_strbuf_appendstr(StringBuffer *sb, const char *str);
bool dyn_strbuf_appendbuff(StringBuffer *sb1, const StringBuffer *sb2);
size_t dyn_strutil_numofdigits(unsigned long v);
bool dyn_strbuf_appendnumulong(StringBuffer *buf, unsigned long value);
bool dyn_strbuf_appendnumlong(StringBuffer *buf, long value);
bool dyn_strbuf_appendnumint(StringBuffer *buf, int value);
bool dyn_strbuf_appendstrnlowercase(StringBuffer *buf, const char *str, size_t len);
bool dyn_strbuf_appendstrnuppercase(StringBuffer *buf, const char *str, size_t len);
bool dyn_strbuf_appendcharn(StringBuffer *buf, char c, size_t n);
void dyn_strbuf_shrink(StringBuffer *sb, size_t len);
size_t dyn_strbuf_chomp(StringBuffer *sbuf);
void dyn_strbuf_reverse(StringBuffer *sbuf);
char *dyn_strbuf_substr(const StringBuffer *sbuf, size_t start, size_t len);
void dyn_strbuf_touppercase(StringBuffer *sbuf);
void dyn_strbuf_tolowercase(StringBuffer *sbuf);
void dyn_strbuf_copyover(StringBuffer *dst, size_t dstpos, const char *src, size_t len);
void dyn_strbuf_insert(StringBuffer *dst, size_t dstpos, const char *src, size_t len);
void dyn_strbuf_overwrite(StringBuffer *dst, size_t dstpos, size_t dstlen, const char *src, size_t srclen);
void dyn_strbuf_erase(StringBuffer *sbuf, size_t pos, size_t len);
int dyn_strbuf_appendformatposv(StringBuffer *sbuf, size_t pos, const char *fmt, va_list argptr);
int dyn_strbuf_appendformatv(StringBuffer *sbuf, const char *fmt, va_list argptr);
int dyn_strbuf_appendformat(StringBuffer *sbuf, const char *fmt, ...);
int dyn_strbuf_appendformatat(StringBuffer *sbuf, size_t pos, const char *fmt, ...);
int dyn_strbuf_appendformatnoterm(StringBuffer *sbuf, size_t pos, const char *fmt, ...);
void dyn_strbuf_triminplace(StringBuffer *sbuf);
void dyn_strbuf_trimleftinplace(StringBuffer *sbuf, const char *list);
void dyn_strbuf_trimrightinplace(StringBuffer *sbuf, const char *list);
/* allocator.h */
/* hashtabval.h */
/* lino.h */
/* mem.h */
/* optparse.h */
/* os.h */
/* replinc.h */
void mrx_context_destroy(RegexContext *ctx);
void mrx_context_seterror(RegexContext *ctx, const char *fmt, ...);
void nn_utf8iter_init(utf8iterator_t *iter, const char *ptr, uint32_t length);
uint8_t nn_utf8iter_charsize(const char *character);
uint32_t nn_utf8iter_converter(const char *character, uint8_t size);
uint8_t nn_utf8iter_next(utf8iterator_t *iter);
const char *nn_utf8iter_getchar(utf8iterator_t *iter);
bool nn_value_isobject(NNValue v);
NNObject *nn_value_asobject(NNValue v);
bool nn_value_isobjtype(NNValue v, NNObjType t);
bool nn_value_isnull(NNValue v);
bool nn_value_isbool(NNValue v);
bool nn_value_isnumber(NNValue v);
bool nn_value_isstring(NNValue v);
bool nn_value_isfuncnative(NNValue v);
bool nn_value_isfuncscript(NNValue v);
bool nn_value_isfuncclosure(NNValue v);
bool nn_value_isfuncbound(NNValue v);
bool nn_value_isclass(NNValue v);
bool nn_value_isinstance(NNValue v);
bool nn_value_isarray(NNValue v);
bool nn_value_isdict(NNValue v);
bool nn_value_isfile(NNValue v);
bool nn_value_isrange(NNValue v);
bool nn_value_ismodule(NNValue v);
bool nn_value_iscallable(NNValue v);
NNObjType nn_value_objtype(NNValue v);
bool nn_value_asbool(NNValue v);
double nn_value_asnumber(NNValue v);
NNObjString *nn_value_asstring(NNValue v);
NNObjFunction *nn_value_asfunction(NNValue v);
NNObjClass *nn_value_asclass(NNValue v);
NNObjInstance *nn_value_asinstance(NNValue v);
NNObjSwitch *nn_value_asswitch(NNValue v);
NNObjUserdata *nn_value_asuserdata(NNValue v);
NNObjModule *nn_value_asmodule(NNValue v);
NNObjArray *nn_value_asarray(NNValue v);
NNObjDict *nn_value_asdict(NNValue v);
NNObjFile *nn_value_asfile(NNValue v);
NNObjRange *nn_value_asrange(NNValue v);
NNValue nn_value_makenull(void);
NNValue nn_value_makebool(bool b);
NNValue nn_value_makenumber(double d);
NNValue nn_value_makeint(int i);
NNValue nn_value_fromobject_actual(NNObject *obj);
NNValue nn_value_copystrlen(NNState *state, const char *str, size_t len);
NNValue nn_value_copystr(NNState *state, const char *str);
NNValArray *nn_valarray_make(NNState *state);
void nn_valarray_destroy(NNValArray *list, bool actuallydelete);
void nn_valtable_init(NNState *state, NNHashValTable *tab);
void nn_valtable_destroy(NNHashValTable *table);
NNHashValEntry *nn_valtable_findentrybyvalue(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue key);
NNHashValEntry *nn_valtable_findentrybystr(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyvalue(NNHashValTable *table, NNValue key);
NNProperty *nn_valtable_getfieldbystr(NNHashValTable *table, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyostr(NNHashValTable *table, NNObjString *str);
NNProperty *nn_valtable_getfieldbycstr(NNHashValTable *table, const char *kstr);
NNProperty *nn_valtable_getfield(NNHashValTable *table, NNValue key);
bool nn_valtable_get(NNHashValTable *table, NNValue key, NNValue *value);
bool nn_valtable_adjustcapacity(NNHashValTable *table, int capacity);
bool nn_valtable_setwithtype(NNHashValTable *table, NNValue key, NNValue value, NNFieldType ftyp, bool keyisstring);
bool nn_valtable_set(NNHashValTable *table, NNValue key, NNValue value);
bool nn_valtable_delete(NNHashValTable *table, NNValue key);
bool nn_valtable_addall(NNHashValTable *from, NNHashValTable *to, bool keepgoing);
void nn_valtable_importall(NNHashValTable *from, NNHashValTable *to);
bool nn_valtable_copy(NNHashValTable *from, NNHashValTable *to);
NNObjString *nn_valtable_findstring(NNHashValTable *table, const char *chars, size_t length, uint32_t hsv);
NNValue nn_valtable_findkey(NNHashValTable *table, NNValue value);
NNObjArray *nn_valtable_getkeys(NNHashValTable *table);
void nn_valtable_mark(NNState *state, NNHashValTable *table);
void nn_valtable_removewhites(NNState *state, NNHashValTable *table);
NNObject *nn_gcmem_protect(NNState *state, NNObject *object);
void nn_gcmem_clearprotect(NNState *state);
const char *nn_util_color(NNColor tc);
char *nn_util_strndup(const char *src, size_t len);
char *nn_util_strdup(const char *src);
char *nn_util_filereadhandle(NNState *state, FILE *hnd, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filereadfile(NNState *state, const char *filename, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filegetshandle(char *s, int size, FILE *f, size_t *lendest);
int nn_util_filegetlinehandle(char **lineptr, size_t *destlen, FILE *hnd);
int nn_util_utf8numbytes(int value);
char *nn_util_utf8encode(unsigned int code, size_t *dlen);
int nn_util_utf8decode(const uint8_t *bytes, uint32_t length);
char *nn_util_utf8codepoint(const char *str, char *outcodepoint);
char *nn_util_utf8strstr(const char *haystack, const char *needle);
char *nn_util_utf8index(char *s, int pos);
void nn_util_utf8slice(char *s, int *start, int *end);
char *nn_util_strtoupper(char *str, size_t length);
char *nn_util_strtolower(char *str, size_t length);
void nn_gcmem_maybecollect(NNState *state, int addsize, bool wasnew);
void *nn_gcmem_reallocate(NNState *state, void *pointer, size_t oldsize, size_t newsize, bool retain);
void *nn_gcmem_allocate(NNState *state, size_t size, size_t amount, bool retain);
void nn_gcmem_release(NNState *state, void *pointer, size_t oldsize);
void nn_gcmem_markobject(NNState *state, NNObject *object);
void nn_gcmem_markvalue(NNState *state, NNValue value);
void nn_gcmem_blackenobject(NNState *state, NNObject *object);
void nn_object_destroy(NNState *state, NNObject *object);
void nn_gcmem_markroots(NNState *state);
void nn_gcmem_tracerefs(NNState *state);
void nn_gcmem_sweep(NNState *state);
void nn_gcmem_destroylinkedobjects(NNState *state);
void nn_gcmem_collectgarbage(NNState *state);
NNValue nn_argcheck_vfail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, va_list va);
NNValue nn_argcheck_fail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, ...);
void nn_argcheck_init(NNState *state, NNArgCheck *ch, const char *name, NNValue *argv, size_t argc);
void nn_dbg_disasmblob(NNPrinter *pr, NNBlob *blob, const char *name);
void nn_dbg_printinstrname(NNPrinter *pr, const char *name);
int nn_dbg_printsimpleinstr(NNPrinter *pr, const char *name, int offset);
int nn_dbg_printconstinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printpropertyinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printshortinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printbyteinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printjumpinstr(NNPrinter *pr, const char *name, int sign, NNBlob *blob, int offset);
int nn_dbg_printtryinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinvokeinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
const char *nn_dbg_op2str(uint8_t instruc);
int nn_dbg_printclosureinstr(NNPrinter *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinstructionat(NNPrinter *pr, NNBlob *blob, int offset);
void nn_blob_init(NNState *state, NNBlob *blob);
void nn_blob_push(NNBlob *blob, NNInstruction ins);
void nn_blob_destroy(NNBlob *blob);
int nn_blob_pushconst(NNBlob *blob, NNValue value);
NNProperty nn_property_makewithpointer(NNState *state, NNValue val, NNFieldType type);
NNProperty nn_property_makewithgetset(NNState *state, NNValue val, NNValue getter, NNValue setter, NNFieldType type);
NNProperty nn_property_make(NNState *state, NNValue val, NNFieldType type);
void nn_valtable_print(NNState *state, NNPrinter *pr, NNHashValTable *table, const char *name);
void nn_printer_initvars(NNState *state, NNPrinter *pr, NNPrMode mode);
NNPrinter *nn_printer_makeundefined(NNState *state, NNPrMode mode);
NNPrinter *nn_printer_makeio(NNState *state, FILE *fh, bool shouldclose);
NNPrinter *nn_printer_makestring(NNState *state);
void nn_printer_makestackio(NNState *state, NNPrinter *pr, FILE *fh, bool shouldclose);
void nn_printer_makestackstring(NNState *state, NNPrinter *pr);
void nn_printer_destroy(NNPrinter *pr);
NNObjString *nn_printer_takestring(NNPrinter *pr);
NNObjString *nn_printer_copystring(NNPrinter *pr);
bool nn_printer_writestringl(NNPrinter *pr, const char *estr, size_t elen);
bool nn_printer_writestring(NNPrinter *pr, const char *estr);
bool nn_printer_writechar(NNPrinter *pr, int b);
bool nn_printer_writeescapedchar(NNPrinter *pr, int ch);
bool nn_printer_writequotedstring(NNPrinter *pr, const char *str, size_t len, bool withquot);
bool nn_printer_vwritefmttostring(NNPrinter *pr, const char *fmt, va_list va);
bool nn_printer_vwritefmt(NNPrinter *pr, const char *fmt, va_list va);
bool nn_printer_printf(NNPrinter *pr, const char *fmt, ...);
void nn_printer_printfunction(NNPrinter *pr, NNObjFunction *func);
void nn_printer_printarray(NNPrinter *pr, NNObjArray *list);
void nn_printer_printdict(NNPrinter *pr, NNObjDict *dict);
void nn_printer_printfile(NNPrinter *pr, NNObjFile *file);
void nn_printer_printinstance(NNPrinter *pr, NNObjInstance *instance, bool invmethod);
void nn_printer_printtable(NNPrinter *pr, NNHashValTable *table);
void nn_printer_printobjclass(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
void nn_printer_printobject(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
void nn_printer_printnumber(NNPrinter *pr, NNValue value);
void nn_printer_printvalue(NNPrinter *pr, NNValue value, bool fixstring, bool invmethod);
NNObjString *nn_value_tostring(NNState *state, NNValue value);
const char *nn_value_objecttypename(NNObject *object);
const char *nn_value_typename(NNValue value);
const char *nn_value_typefromfunction(NNValIsFuncFN func);
bool nn_value_compobject(NNState *state, NNValue a, NNValue b);
bool nn_value_compare_actual(NNState *state, NNValue a, NNValue b);
bool nn_value_compare(NNState *state, NNValue a, NNValue b);
uint32_t nn_util_hashbits(uint64_t hs);
uint32_t nn_util_hashdouble(double value);
uint32_t nn_util_hashstring(const char *str, size_t length);
uint32_t nn_object_hashobject(NNObject *object);
uint32_t nn_value_hashvalue(NNValue value);
NNValue nn_value_findgreater(NNValue a, NNValue b);
void nn_value_sortvalues(NNState *state, NNValue *values, int count);
NNValue nn_value_copyvalue(NNState *state, NNValue value);
NNObject *nn_object_allocobject(NNState *state, size_t size, NNObjType type, bool retain);
NNObjUserdata *nn_object_makeuserdata(NNState *state, void *pointer, const char *name);
NNObjModule *nn_module_make(NNState *state, const char *name, const char *file, bool imported, bool retain);
void nn_module_destroy(NNState *state, NNObjModule *module);
void nn_module_setfilefield(NNState *state, NNObjModule *module);
NNObjSwitch *nn_object_makeswitch(NNState *state);
NNObjArray *nn_object_makearray(NNState *state);
NNObjRange *nn_object_makerange(NNState *state, int lower, int upper);
NNObjDict *nn_object_makedict(NNState *state);
NNObjFile *nn_object_makefile(NNState *state, FILE *handle, bool isstd, const char *path, const char *mode);
void nn_file_destroy(NNObjFile *file);
void nn_file_mark(NNObjFile *file);
bool nn_file_read(NNObjFile *file, size_t readhowmuch, NNIOResult *dest);
NNObjFunction *nn_object_makefuncbound(NNState *state, NNValue receiver, NNObjFunction *method);
NNObjClass *nn_object_makeclass(NNState *state, NNObjString *name, NNObjClass *parent);
void nn_class_destroy(NNObjClass *klass);
bool nn_class_inheritfrom(NNObjClass *subclass, NNObjClass *superclass);
bool nn_class_defproperty(NNObjClass *klass, NNObjString *cstrname, NNValue val);
bool nn_class_defcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_setstaticproperty(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativeconstructorptr(NNObjClass *klass, NNNativeFN function, void *uptr);
bool nn_class_defnativeconstructor(NNObjClass *klass, NNNativeFN function);
bool nn_class_defmethod(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *ptr);
bool nn_class_defnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
NNProperty *nn_class_getmethodfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getpropertyfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticproperty(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticmethodfield(NNObjClass *klass, NNObjString *name);
NNObjInstance *nn_object_makeinstance(NNState *state, NNObjClass *klass);
void nn_instance_mark(NNObjInstance *instance);
void nn_instance_destroy(NNObjInstance *instance);
bool nn_instance_defproperty(NNObjInstance *instance, NNObjString *name, NNValue val);
NNObjFunction *nn_object_makefuncscript(NNState *state, NNObjModule *module, NNFuncContextType type);
void nn_funcscript_destroy(NNObjFunction *function);
NNObjFunction *nn_object_makefuncnative(NNState *state, NNNativeFN function, const char *name, void *uptr);
NNObjFunction *nn_object_makefuncclosure(NNState *state, NNObjFunction *function);
NNObjString *nn_string_makefromstrbuf(NNState *state, StringBuffer *sbuf, uint32_t hsv);
size_t nn_string_getlength(NNObjString *os);
const char *nn_string_getdata(NNObjString *os);
const char *nn_string_getcstr(NNObjString *os);
void nn_string_destroy(NNState *state, NNObjString *str);
NNObjString *nn_string_internlen(NNState *state, const char *chars, int length);
NNObjString *nn_string_intern(NNState *state, const char *chars);
NNObjString *nn_string_takelen(NNState *state, char *chars, int length);
NNObjString *nn_string_takecstr(NNState *state, char *chars);
NNObjString *nn_string_copylen(NNState *state, const char *chars, int length);
NNObjString *nn_string_copycstr(NNState *state, const char *chars);
NNObjString *nn_string_copyobject(NNState *state, NNObjString *origos);
NNObjUpvalue *nn_object_makeupvalue(NNState *state, NNValue *slot, int stackpos);
void nn_astlex_init(NNAstLexer *lex, NNState *state, const char *source);
NNAstLexer *nn_astlex_make(NNState *state, const char *source);
void nn_astlex_destroy(NNState *state, NNAstLexer *lex);
bool nn_astlex_isatend(NNAstLexer *lex);
NNAstToken nn_astlex_createtoken(NNAstLexer *lex, NNAstTokType type);
NNAstToken nn_astlex_errortoken(NNAstLexer *lex, const char *fmt, ...);
bool nn_astutil_isdigit(char c);
bool nn_astutil_isbinary(char c);
bool nn_astutil_isalpha(char c);
bool nn_astutil_isoctal(char c);
bool nn_astutil_ishexadecimal(char c);
const char *nn_astutil_toktype2str(int t);
char nn_astlex_advance(NNAstLexer *lex);
bool nn_astlex_match(NNAstLexer *lex, char expected);
char nn_astlex_peekcurr(NNAstLexer *lex);
char nn_astlex_peekprev(NNAstLexer *lex);
char nn_astlex_peeknext(NNAstLexer *lex);
NNAstToken nn_astlex_skipblockcomments(NNAstLexer *lex);
NNAstToken nn_astlex_skipspace(NNAstLexer *lex);
NNAstToken nn_astlex_scanstring(NNAstLexer *lex, char quote, bool withtemplate, bool permitescapes);
NNAstToken nn_astlex_scannumber(NNAstLexer *lex);
NNAstTokType nn_astlex_getidenttype(NNAstLexer *lex);
NNAstToken nn_astlex_scanident(NNAstLexer *lex, bool isdollar);
NNAstToken nn_astlex_scandecorator(NNAstLexer *lex);
NNAstToken nn_astlex_scantoken(NNAstLexer *lex);
NNAstParser *nn_astparser_makeparser(NNState *state, NNAstLexer *lexer, NNObjModule *module, bool keeplast);
void nn_astparser_destroy(NNAstParser *parser);
NNBlob *nn_astparser_currentblob(NNAstParser *prs);
bool nn_astparser_raiseerroratv(NNAstParser *prs, NNAstToken *t, const char *message, va_list args);
bool nn_astparser_raiseerror(NNAstParser *prs, const char *message, ...);
bool nn_astparser_raiseerroratcurrent(NNAstParser *prs, const char *message, ...);
void nn_astparser_advance(NNAstParser *prs);
bool nn_astparser_consume(NNAstParser *prs, NNAstTokType t, const char *message);
void nn_astparser_consumeor(NNAstParser *prs, const char *message, const NNAstTokType *ts, int count);
bool nn_astparser_checknumber(NNAstParser *prs);
bool nn_astparser_istype(NNAstTokType prev, NNAstTokType t);
bool nn_astparser_check(NNAstParser *prs, NNAstTokType t);
bool nn_astparser_match(NNAstParser *prs, NNAstTokType t);
void nn_astparser_runparser(NNAstParser *parser);
void nn_astparser_parsedeclaration(NNAstParser *prs);
void nn_astparser_parsestmt(NNAstParser *prs);
void nn_astparser_consumestmtend(NNAstParser *prs);
void nn_astparser_ignorewhitespace(NNAstParser *prs);
int nn_astparser_getcodeargscount(const NNInstruction *bytecode, const NNValue *constants, int ip);
void nn_astemit_emit(NNAstParser *prs, uint8_t byte, int line, bool isop);
void nn_astemit_patchat(NNAstParser *prs, size_t idx, uint8_t byte);
void nn_astemit_emitinstruc(NNAstParser *prs, uint8_t byte);
void nn_astemit_emit1byte(NNAstParser *prs, uint8_t byte);
void nn_astemit_emit1short(NNAstParser *prs, uint16_t byte);
void nn_astemit_emit2byte(NNAstParser *prs, uint8_t byte, uint8_t byte2);
void nn_astemit_emitbyteandshort(NNAstParser *prs, uint8_t byte, uint16_t byte2);
void nn_astemit_emitloop(NNAstParser *prs, int loopstart);
void nn_astemit_emitreturn(NNAstParser *prs);
int nn_astparser_pushconst(NNAstParser *prs, NNValue value);
void nn_astemit_emitconst(NNAstParser *prs, NNValue value);
int nn_astemit_emitjump(NNAstParser *prs, uint8_t instruction);
int nn_astemit_emitswitch(NNAstParser *prs);
int nn_astemit_emittry(NNAstParser *prs);
void nn_astemit_patchswitch(NNAstParser *prs, int offset, int constant);
void nn_astemit_patchtry(NNAstParser *prs, int offset, int type, int address, int finally);
void nn_astemit_patchjump(NNAstParser *prs, int offset);
void nn_astfunccompiler_init(NNAstParser *prs, NNAstFuncCompiler *fnc, NNFuncContextType type, bool isanon);
int nn_astparser_makeidentconst(NNAstParser *prs, NNAstToken *name);
bool nn_astparser_identsequal(NNAstToken *a, NNAstToken *b);
int nn_astfunccompiler_resolvelocal(NNAstParser *prs, NNAstFuncCompiler *fnc, NNAstToken *name);
int nn_astfunccompiler_addupvalue(NNAstParser *prs, NNAstFuncCompiler *fnc, uint16_t index, bool islocal);
int nn_astfunccompiler_resolveupvalue(NNAstParser *prs, NNAstFuncCompiler *fnc, NNAstToken *name);
int nn_astparser_addlocal(NNAstParser *prs, NNAstToken name);
void nn_astparser_declarevariable(NNAstParser *prs);
int nn_astparser_parsevariable(NNAstParser *prs, const char *message);
void nn_astparser_markinitialized(NNAstParser *prs);
void nn_astparser_definevariable(NNAstParser *prs, int global);
NNAstToken nn_astparser_synthtoken(const char *name);
NNObjFunction *nn_astparser_endcompiler(NNAstParser *prs, bool istoplevel);
void nn_astparser_scopebegin(NNAstParser *prs);
bool nn_astutil_scopeendcancontinue(NNAstParser *prs);
void nn_astparser_scopeend(NNAstParser *prs);
int nn_astparser_discardlocals(NNAstParser *prs, int depth);
void nn_astparser_endloop(NNAstParser *prs);
bool nn_astparser_rulebinary(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_rulecall(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleliteral(NNAstParser *prs, bool canassign);
void nn_astparser_parseassign(NNAstParser *prs, uint8_t realop, uint8_t getop, uint8_t setop, int arg);
void nn_astparser_assignment(NNAstParser *prs, uint8_t getop, uint8_t setop, int arg, bool canassign);
bool nn_astparser_ruledot(NNAstParser *prs, NNAstToken previous, bool canassign);
void nn_astparser_namedvar(NNAstParser *prs, NNAstToken name, bool canassign);
void nn_astparser_createdvar(NNAstParser *prs, NNAstToken name);
bool nn_astparser_rulearray(NNAstParser *prs, bool canassign);
bool nn_astparser_ruledictionary(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleindexing(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_rulevarnormal(NNAstParser *prs, bool canassign);
bool nn_astparser_rulethis(NNAstParser *prs, bool canassign);
bool nn_astparser_rulesuper(NNAstParser *prs, bool canassign);
bool nn_astparser_rulegrouping(NNAstParser *prs, bool canassign);
NNValue nn_astparser_compilestrnumber(NNAstTokType type, const char *source);
NNValue nn_astparser_compilenumber(NNAstParser *prs);
bool nn_astparser_rulenumber(NNAstParser *prs, bool canassign);
int nn_astparser_readhexdigit(char c);
int nn_astparser_readhexescape(NNAstParser *prs, const char *str, int index, int count);
int nn_astparser_readunicodeescape(NNAstParser *prs, char *string, const char *realstring, int numberbytes, int realindex, int index);
char *nn_astparser_compilestring(NNAstParser *prs, int *length, bool permitescapes);
bool nn_astparser_rulestring(NNAstParser *prs, bool canassign);
bool nn_astparser_rulerawstring(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleinterpolstring(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleunary(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleand(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleor(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleinstanceof(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleconditional(NNAstParser *prs, NNAstToken previous, bool canassign);
bool nn_astparser_ruleimport(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenew(NNAstParser *prs, bool canassign);
bool nn_astparser_ruletypeof(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenothingprefix(NNAstParser *prs, bool canassign);
bool nn_astparser_rulenothinginfix(NNAstParser *prs, NNAstToken previous, bool canassign);
NNAstRule *nn_astparser_putrule(NNAstRule *dest, NNAstParsePrefixFN prefix, NNAstParseInfixFN infix, NNAstPrecedence precedence);
NNAstRule *nn_astparser_getrule(NNAstTokType type);
bool nn_astparser_doparseprecedence(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseprecedence(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseprecnoadvance(NNAstParser *prs, NNAstPrecedence precedence);
bool nn_astparser_parseexpression(NNAstParser *prs);
bool nn_astparser_parseblock(NNAstParser *prs);
void nn_astparser_declarefuncargvar(NNAstParser *prs);
int nn_astparser_parsefuncparamvar(NNAstParser *prs, const char *message);
uint8_t nn_astparser_parsefunccallargs(NNAstParser *prs);
void nn_astparser_parsefuncparamlist(NNAstParser *prs);
void nn_astfunccompiler_compilebody(NNAstParser *prs, NNAstFuncCompiler *fnc, bool closescope, bool isanon);
void nn_astparser_parsefuncfull(NNAstParser *prs, NNFuncContextType type, bool isanon);
void nn_astparser_parsemethod(NNAstParser *prs, NNAstToken classname, NNAstToken methodname, bool havenametoken, bool isstatic);
bool nn_astparser_ruleanonfunc(NNAstParser *prs, bool canassign);
bool nn_astparser_ruleanonclass(NNAstParser *prs, bool canassign);
bool nn_astparser_parsefield(NNAstParser *prs, NNAstToken *nametokendest, bool *havenamedest, bool isstatic);
void nn_astparser_parsefuncdecl(NNAstParser *prs);
void nn_astparser_parseclassdeclaration(NNAstParser *prs, bool named);
void nn_astparser_parsevardecl(NNAstParser *prs, bool isinitializer, bool isconst);
void nn_astparser_parseexprstmt(NNAstParser *prs, bool isinitializer, bool semi);
void nn_astparser_parseforstmt(NNAstParser *prs);
void nn_astparser_parseforeachstmt(NNAstParser *prs);
void nn_astparser_parseswitchstmt(NNAstParser *prs);
void nn_astparser_parseifstmt(NNAstParser *prs);
void nn_astparser_parseechostmt(NNAstParser *prs);
void nn_astparser_parsethrowstmt(NNAstParser *prs);
void nn_astparser_parseassertstmt(NNAstParser *prs);
void nn_astparser_parsetrystmt(NNAstParser *prs);
void nn_astparser_parsereturnstmt(NNAstParser *prs);
void nn_astparser_parsewhilestmt(NNAstParser *prs);
void nn_astparser_parsedo_whilestmt(NNAstParser *prs);
void nn_astparser_parsecontinuestmt(NNAstParser *prs);
void nn_astparser_parsebreakstmt(NNAstParser *prs);
void nn_astparser_synchronize(NNAstParser *prs);
NNObjFunction *nn_astparser_compilesource(NNState *state, NNObjModule *module, const char *source, NNBlob *blob, bool fromimport, bool keeplast);
void nn_gcmem_markcompilerroots(NNState *state);
NNRegModule *nn_natmodule_load_null(NNState *state);
void nn_modfn_os_preloader(NNState *state);
NNValue nn_modfn_os_readdir(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNRegModule *nn_natmodule_load_os(NNState *state);
NNValue nn_modfn_astscan_scan(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNRegModule *nn_natmodule_load_astscan(NNState *state);
bool nn_import_loadnativemodule(NNState *state, NNModInitFN init_fn, char *importname, const char *source, void *dlw);
void nn_import_addnativemodule(NNState *state, NNObjModule *module, const char *as);
void nn_import_loadbuiltinmodules(NNState *state);
void nn_import_closemodule(void *hnd);
bool nn_util_fsfileexists(NNState *state, const char *filepath);
bool nn_util_fsfileistype(NNState *state, const char *filepath, int typ);
bool nn_util_fsfileisfile(NNState *state, const char *filepath);
bool nn_util_fsfileisdirectory(NNState *state, const char *filepath);
NNObjModule *nn_import_loadmodulescript(NNState *state, NNObjModule *intomodule, NNObjString *modulename);
char *nn_import_resolvepath(NNState *state, char *modulename, const char *currentfile, char *rootfile, bool isrelative);
char *nn_util_fsgetbasename(NNState *state, char *path);
NNValue nn_objfndict_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_add(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_set(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_clear(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_clone(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_compact(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_contains(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_extend(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_keys(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_values(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_remove(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_isempty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_findkey(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_tolist(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_filter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_some(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_every(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfndict_reduce(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
int nn_fileobject_close(NNObjFile *file);
bool nn_fileobject_open(NNObjFile *file);
NNValue nn_objfnfile_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_exists(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isdirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readstatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_writestatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_statstatic(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_close(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_open(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isopen(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_isclosed(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readmethod(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_readline(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_gets(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_write(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_puts(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_printf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_number(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_istty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_flush(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_util_statfilldictphysfile(NNObjDict *dict, struct stat *st);
NNValue nn_objfnfile_statmethod(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_path(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_mode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_name(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_seek(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnfile_tell(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNObjArray *nn_array_makefilled(NNState *state, size_t cnt, NNValue filler);
NNObjArray *nn_array_make(NNState *state);
void nn_array_push(NNObjArray *list, NNValue value);
bool nn_array_get(NNObjArray *list, size_t idx, NNValue *vdest);
NNObjArray *nn_array_copy(NNObjArray *list, long start, long length);
NNValue nn_objfnarray_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_append(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_clear(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_clone(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_count(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_extend(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_indexof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_insert(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_pop(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_shift(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_removeat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_remove(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_reverse(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_sort(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_contains(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_delete(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_first(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_last(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_isempty(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_take(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_get(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_compact(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_unique(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_zip(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_zipfrom(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_todict(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_map(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_filter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_some(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_every(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_reduce(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_slice(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_lower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_upper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_range(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_expand(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnrange_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8numbytes(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8decode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8encode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_util_stringutf8chars(NNState *state, NNValue thisval, NNValue *argv, size_t argc, bool onlycodepoint);
NNValue nn_objfnstring_utf8chars(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_utf8codepoints(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_fromcharcode(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_length(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_string_fromrange(NNState *state, const char *buf, int len);
NNObjString *nn_string_substring(NNState *state, NNObjString *selfstr, size_t start, size_t end, bool likejs);
NNValue nn_objfnstring_substring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_charcodeat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_charat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_upper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_lower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isalpha(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isalnum(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isfloat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isnumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_islower(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isupper(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isspace(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_trim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_ltrim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_rtrim(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnarray_join(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_indexof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_startswith(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_endswith(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_util_stringregexmatch(NNState *state, NNObjString *string, NNObjString *pattern, bool capture);
NNValue nn_objfnstring_matchcapture(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_matchonly(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_count(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_tonumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_isascii(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_tolist(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_lpad(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_rpad(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_split(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_replace(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_iter(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_itern(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnstring_each(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_dumpself(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_tostring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_typename(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_getselfclass(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isarray(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isa(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_iscallable(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isbool(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isnumber(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isint(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isdict(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isobject(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isfunction(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isiterable(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isclass(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnobject_isinstance(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnclass_getselfname(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNObjString *nn_util_numbertobinstring(NNState *state, long n);
NNObjString *nn_util_numbertooctstring(NNState *state, int64_t n, bool numeric);
NNObjString *nn_util_numbertohexstring(NNState *state, int64_t n, bool numeric);
NNValue nn_objfnnumber_tobinstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_tooctstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_constructor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnnumber_tohexstring(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_abs(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_round(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_sqrt(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_ceil(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_floor(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnmath_min(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_exedirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_scriptfile(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_scriptdirectory(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_exit(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnprocess_kill(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_objfnjson_stringify(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_state_installmethods(NNState *state, NNObjClass *klass, NNConstClassMethodItem *listmethods);
void nn_state_initbuiltinmethods(NNState *state);
NNValue nn_nativefn_time(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_microtime(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_id(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_int(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_chr(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_ord(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_util_mtseed(uint32_t seed, uint32_t *binst, uint32_t *index);
uint32_t nn_util_mtgenerate(uint32_t *binst, uint32_t *index);
double nn_util_mtrand(double lowerlimit, double upperlimit);
NNValue nn_nativefn_rand(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_eval(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_instanceof(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_strformat_init(NNState *state, NNFormatInfo *nfi, NNPrinter *writer, const char *fmtstr, size_t fmtlen);
void nn_strformat_destroy(NNFormatInfo *nfi);
bool nn_strformat_format(NNFormatInfo *nfi, int argc, int argbegin, NNValue *argv);
NNValue nn_nativefn_sprintf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_printf(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_print(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_println(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNValue nn_nativefn_isnan(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
void nn_state_initbuiltinfunctions(NNState *state);
void nn_state_vwarn(NNState *state, const char *fmt, va_list va);
void nn_state_warn(NNState *state, const char *fmt, ...);
NNValue nn_except_getstacktrace(NNState *state);
bool nn_except_propagate(NNState *state);
bool nn_except_pushhandler(NNState *state, NNObjClass *type, int address, int finallyaddress);
bool nn_except_vthrowactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, va_list va);
bool nn_except_throwactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_throwwithclass(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_vthrowwithclass(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, const char *format, va_list args);
NNInstruction nn_util_makeinst(bool isop, uint8_t code, int srcline);
NNObjClass *nn_except_makeclass(NNState *state, NNObjModule *module, const char *cstrname, bool iscs);
NNObjInstance *nn_except_makeinstance(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, NNObjString *message);
void nn_vm_raisefatalerror(NNState *state, const char *format, ...);
bool nn_state_defglobalvalue(NNState *state, const char *name, NNValue val);
bool nn_state_defnativefunctionptr(NNState *state, const char *name, NNNativeFN fptr, void *uptr);
bool nn_state_defnativefunction(NNState *state, const char *name, NNNativeFN fptr);
NNObjClass *nn_util_makeclass(NNState *state, const char *name, NNObjClass *parent);
void nn_vm_initvmstate(NNState *state);
bool nn_vm_resizestack(NNState *state, NNObjFunction *closure, size_t needed);
bool nn_vm_resizeframes(NNState *state, NNObjFunction *closure, size_t needed);
bool nn_vm_checkmayberesize(NNState *state);
void nn_vm_resizeinfo(NNState *state, const char *context, NNObjFunction *closure, size_t needed);
void nn_state_resetvmstate(NNState *state);
bool nn_state_addsearchpathobj(NNState *state, NNObjString *os);
bool nn_state_addsearchpath(NNState *state, const char *path);
void nn_state_buildprocessinfo(NNState *state);
void nn_state_updateprocessinfo(NNState *state);
bool nn_state_makestack(NNState *pstate);
NNState *nn_state_makealloc(void);
bool nn_state_makewithuserptr(NNState *pstate, void *userptr);
void nn_state_destroy(NNState *state, bool onstack);
bool nn_util_methodisprivate(NNObjString *name);
bool nn_vm_callclosure(NNState *state, NNObjFunction *closure, NNValue thisval, int argcount);
bool nn_vm_callnative(NNState *state, NNObjFunction *native, NNValue thisval, int argcount);
bool nn_vm_callvaluewithobject(NNState *state, NNValue callable, NNValue thisval, int argcount);
bool nn_vm_callvalue(NNState *state, NNValue callable, NNValue thisval, int argcount);
NNFuncContextType nn_value_getmethodtype(NNValue method);
NNObjClass *nn_value_getclassfor(NNState *state, NNValue receiver);
void nn_vm_stackpush(NNState *state, NNValue value);
NNValue nn_vm_stackpop(NNState *state);
NNValue nn_vm_stackpopn(NNState *state, int n);
NNValue nn_vm_stackpeek(NNState *state, int distance);
bool nn_value_isfalse(NNValue value);
bool nn_util_isinstanceof(NNObjClass *klass1, NNObjClass *expected);
bool nn_dict_setentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentrycstr(NNObjDict *dict, const char *ckey, NNValue value);
NNProperty *nn_dict_getentry(NNObjDict *dict, NNValue key);
NNObjDict *nn_dict_copy(NNObjDict *dict);
void nn_vmdebug_printvalue(NNState *state, NNValue val, const char *fmt, ...);
NNStatus nn_vm_runvm(NNState *state, int exitframe, NNValue *rv);
int nn_nestcall_prepare(NNState *state, NNValue callable, NNValue mthobj, NNValue *callarr, int maxcallarr);
bool nn_nestcall_callfunction(NNState *state, NNValue callable, NNValue thisval, NNValue *argv, size_t argc, NNValue *dest);
NNObjFunction *nn_state_compilesource(NNState *state, NNObjModule *module, bool fromeval, const char *source, bool toplevel);
NNStatus nn_state_execsource(NNState *state, NNObjModule *module, const char *source, const char *filename, NNValue *dest);
NNValue nn_state_evalsource(NNState *state, const char *source);
char *nn_cli_getinput(const char *prompt);
void nn_cli_addhistoryline(const char *line);
void nn_cli_freeline(char *line);
bool nn_cli_repl(NNState *state);
bool nn_cli_runfile(NNState *state, const char *file);
bool nn_cli_runcode(NNState *state, char *source);
int nn_util_findfirstpos(const char *str, size_t len, int ch);
void nn_cli_parseenv(NNState *state, char **envp);
void nn_cli_printtypesizes(void);
void optprs_fprintmaybearg(FILE *out, const char *begin, const char *flagname, size_t flaglen, bool needval, bool maybeval, const char *delim);
void optprs_fprintusage(FILE *out, optlongflags_t *flags);
void nn_cli_showusage(char *argv[], optlongflags_t *flags, bool fail);
int main(int argc, char *argv[], char **envp);
int replmain(const char *file);
int lino_util_strcasecmp(const char *s1, const char *s2);
int lino_util_strncasecmp(const char *s1, const char *s2, int n);
size_t lino_util_defaultprevcharlen(const char *buf, size_t buflen, size_t pos, size_t *collen);
size_t lino_util_defaultnextcharlen(const char *buf, size_t buflen, size_t pos, size_t *collen);
size_t lino_util_defaultreadcode(int fd, char *buf, size_t buflen, int *c);
void lino_setencodingfunctions(linofnprevcharlenfunc_t *prevCharLenFunc, linofnnextcharlenfunc_t *nextCharLenFunc, linofnreadcodefunc_t *readCodeFunc);
size_t lino_util_columnpos(const char *buf, size_t buflen, size_t pos);
size_t lino_util_columnposformultiline(const char *buf, size_t buflen, size_t pos, size_t cols, size_t ini_pos);
void lino_maskmodeenable(void);
void lino_maskmodedisable(void);
void lino_setmultiline(int ml);
int lino_util_isunsupportedterm(void);
int lino_util_enablerawmode(int fd);
void lino_util_disablerawmode(int fd);
int lino_util_getcursorposition(int ifd, int ofd);
int lino_util_getcolumns(int ifd, int ofd);
void lino_clearscreen(void);
void lino_util_beep(void);
void lino_freecompletions(linocompletions_t *lc);
int lino_completeline(linostate_t *ls, char *cbuf, size_t cbuflen, int *c);
void lino_setcompletioncallback(linofncompletionfunc_t *fn);
void lino_sethintscallback(linofnhintsfunc_t *fn);
void lino_setfreehintscallback(linofnfreehintsfunc_t *fn);
void lino_addcompletion(linocompletions_t *lc, const char *str);
void lino_appendbuf_init(linobuffer_t *ab);
void lino_appendbuf_append(linobuffer_t *ab, const char *s, int len);
void lino_appendbuf_destroy(linobuffer_t *ab);
void lino_refreshshowhints(linobuffer_t *ab, linostate_t *l, int pcollen);
int lino_util_isansiescape(const char *buf, size_t buflen, size_t *len);
size_t lino_util_prompttextcolumnlen(const char *prompt, size_t plen);
void lino_util_refreshsingleline(linostate_t *l);
void lino_util_refreshmultiline(linostate_t *l);
void lino_refreshline(linostate_t *l);
int lino_editinsert(linostate_t *l, const char *cbuf, int clen);
void lino_editmoveleft(linostate_t *l);
void lino_editmoveright(linostate_t *l);
void lino_editmovehome(linostate_t *l);
void lino_edit_moveend(linostate_t *l);
void lino_edithistorynext(linostate_t *l, int dir);
void lino_editdelete(linostate_t *l);
void lino_editbackspace(linostate_t *l);
void lino_editdelprevword(linostate_t *l);
int lino_editline(int stdin_fd, int stdout_fd, char *buf, size_t buflen, const char *prompt);
void lino_printkeycodes(void);
int lino_util_getraw(char *buf, size_t buflen, const char *prompt);
char *lino_notty(void);
char *lino_readline(const char *prompt);
void lino_freeline(void *ptr);
void lino_freehistory(void);
void lino_atexit(void);
int lino_historyadd(const char *line);
int lino_historysetmaxlength(int len);
int lino_historysavetofile(const char *filename);
int lino_historyloadfromfile(const char *filename);
void nn_memory_init(void);
void nn_memory_finish(void);
void *nn_memory_setsize(void *p, size_t sz);
size_t nn_memory_getsize(void *p);
void *nn_memory_malloc(size_t sz);
void *nn_memory_realloc(void *p, size_t nsz);
void *nn_memory_calloc(size_t count, size_t typsize);
void nn_memory_free(void *ptr);
int optprs_makeerror(optcontext_t *ox, const char *msg, const char *data);
bool optbits_isdashdash(const char *arg);
bool optbits_isshortopt(const char *arg);
bool optbits_islongopt(const char *arg);
void optbits_permute(optcontext_t *ox, int index);
int optbits_getargtype(const char *optstring, char c);
bool optbits_islongoptsend(const optlongflags_t *longopts, int i);
void optbits_fromlong(const optlongflags_t *longopts, char *optstring);
bool optbits_matchlongopts(const char *longname, const char *option);
char *optbits_getlongoptsarg(char *option);
int optbits_longfallback(optcontext_t *ox, const optlongflags_t *longopts, int *longindex);
void optprs_init(optcontext_t *ox, int argc, char **argv);
int optprs_nextshortflag(optcontext_t *ox, const char *optstring);
int optprs_nextlongflag(optcontext_t *ox, const optlongflags_t *longopts, int *longindex);
char *optprs_nextpositional(optcontext_t *ox);
char *osfn_utilstrndup(const char *src, size_t len);
char *osfn_utilstrdup(const char *src);
bool fslib_diropen(FSDirReader *rd, const char *path);
bool fslib_dirread(FSDirReader *rd, FSDirItem *itm);
bool fslib_dirclose(FSDirReader *rd);
FILE *osfn_popen(const char *cmd, const char *type);
void osfn_pclose(FILE *fh);
int osfn_chmod(const char *path, int mode);
char *osfn_realpath(const char *path, char *respath);
char *osfn_dirname(const char *fname);
char *osfn_fallbackbasename(const char *opath);
char *osfn_basename(const char *path);
int osfn_isatty(int fd);
int osfn_symlink(const char *path1, const char *path2);
int osfn_symlinkat(const char *path1, int fd, const char *path2);
char *osfn_getcwd(char *buf, size_t size);
int osfn_lstat(const char *path, struct stat *buf);
int osfn_truncate(const char *path, size_t length);
unsigned int osfn_sleep(unsigned int seconds);
int osfn_gettimeofday(struct timeval *tp, void *tzp);
int osfn_mkdir(const char *path, size_t mode);
int osfn_chdir(const char *path);
int osfn_getpid(void);
int osfn_kill(int pid, int code);
size_t dyn_strutil_rndup2pow64(uint64_t x);
char *dyn_strutil_safencpy(char *dst, const char *src, size_t n);
size_t dyn_strutil_splitstr(char *str, char sep, char **ptrs, size_t nptrs);
size_t dyn_strutil_charreplace(char *str, char from, char to);
void dyn_strutil_reverseregion(char *str, size_t length);
bool dyn_strutil_isallspace(const char *s);
char *dyn_strutil_nextspace(char *s);
char *dyn_strutil_trim(char *str);
size_t dyn_strutil_chomp(char *str, size_t len);
size_t dyn_strutil_countchar(const char *str, char c);
size_t dyn_strutil_split(const char *splitat, const char *sourcetxt, char ***result);
void dyn_strutil_callboundscheckinsert(const StringBuffer *sbuf, size_t pos, const char *file, int line);
void dyn_strutil_callboundscheckreadrange(const StringBuffer *sbuf, size_t start, size_t len, const char *file, int line);
StringBuffer *dyn_strbuf_makefromptr(StringBuffer *sbuf, size_t len);
bool dyn_strbuf_initbasicempty(StringBuffer *sbuf, size_t len, bool onstack);
bool dyn_strbuf_makebasicemptystack(StringBuffer *sbuf, size_t len);
StringBuffer *dyn_strbuf_makebasicempty(size_t len);
bool dyn_strbuf_destroyfromstack(StringBuffer *sb);
bool dyn_strbuf_destroy(StringBuffer *sb);
bool dyn_strbuf_destroyfromptr(StringBuffer *sb);
StringBuffer *dyn_strbuf_makefromstring(const char *str, size_t slen);
StringBuffer *dyn_strbuf_makeclone(const StringBuffer *sbuf);
void dyn_strbuf_reset(StringBuffer *sb);
void dyn_strutil_cbufcapacity(char **buf, size_t *sizeptr, size_t len);
void dyn_strutil_cbufappendchar(char **buf, size_t *lenptr, size_t *sizeptr, char c);
bool dyn_strbuf_resize(StringBuffer *sbuf, size_t newlen);
void dyn_strbuf_ensurecapacity(StringBuffer *sb, size_t len);
void dyn_strbuf_ensurecapacityupdateptr(StringBuffer *sbuf, size_t size, const char **ptr);
bool dyn_strbuf_containschar(StringBuffer *sb, char ch);
void dyn_strutil_faststrncat(char *dest, const char *src, size_t *size);
size_t dyn_strutil_strreplace1(char **str, size_t selflen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
size_t dyn_strutil_strrepcount(const char *str, size_t slen, const char *findstr, size_t findlen, size_t sublen);
void dyn_strutil_strreplace2(char *target, size_t tgtlen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool dyn_strbuf_fullreplace(StringBuffer *sb, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool dyn_strutil_inpreplhelper(char *dest, const char *src, size_t srclen, int findme, const char *substr, size_t sublen, size_t maxlen, size_t *dlen);
size_t dyn_strutil_inpreplace(char *target, size_t tgtlen, int findme, const char *substr, size_t sublen, size_t maxlen);
bool dyn_strbuf_charreplace(StringBuffer *sb, int findme, const char *substr, size_t sublen);
void dyn_strbuf_set(StringBuffer *sb, const char *str);
void dyn_strbuf_setbuff(StringBuffer *dest, StringBuffer *from);
bool dyn_strbuf_appendchar(StringBuffer *sb, int c);
bool dyn_strbuf_appendstrn(StringBuffer *sb, const char *str, size_t len);
bool dyn_strbuf_appendstr(StringBuffer *sb, const char *str);
bool dyn_strbuf_appendbuff(StringBuffer *sb1, const StringBuffer *sb2);
size_t dyn_strutil_numofdigits(unsigned long v);
bool dyn_strbuf_appendnumulong(StringBuffer *buf, unsigned long value);
bool dyn_strbuf_appendnumlong(StringBuffer *buf, long value);
bool dyn_strbuf_appendnumint(StringBuffer *buf, int value);
bool dyn_strbuf_appendstrnlowercase(StringBuffer *buf, const char *str, size_t len);
bool dyn_strbuf_appendstrnuppercase(StringBuffer *buf, const char *str, size_t len);
bool dyn_strbuf_appendcharn(StringBuffer *buf, char c, size_t n);
void dyn_strbuf_shrink(StringBuffer *sb, size_t len);
size_t dyn_strbuf_chomp(StringBuffer *sbuf);
void dyn_strbuf_reverse(StringBuffer *sbuf);
char *dyn_strbuf_substr(const StringBuffer *sbuf, size_t start, size_t len);
void dyn_strbuf_touppercase(StringBuffer *sbuf);
void dyn_strbuf_tolowercase(StringBuffer *sbuf);
void dyn_strbuf_copyover(StringBuffer *dst, size_t dstpos, const char *src, size_t len);
void dyn_strbuf_insert(StringBuffer *dst, size_t dstpos, const char *src, size_t len);
void dyn_strbuf_overwrite(StringBuffer *dst, size_t dstpos, size_t dstlen, const char *src, size_t srclen);
void dyn_strbuf_erase(StringBuffer *sbuf, size_t pos, size_t len);
int dyn_strbuf_appendformatposv(StringBuffer *sbuf, size_t pos, const char *fmt, va_list argptr);
int dyn_strbuf_appendformatv(StringBuffer *sbuf, const char *fmt, va_list argptr);
int dyn_strbuf_appendformat(StringBuffer *sbuf, const char *fmt, ...);
int dyn_strbuf_appendformatat(StringBuffer *sbuf, size_t pos, const char *fmt, ...);
int dyn_strbuf_appendformatnoterm(StringBuffer *sbuf, size_t pos, const char *fmt, ...);
void dyn_strbuf_triminplace(StringBuffer *sbuf);
void dyn_strbuf_trimleftinplace(StringBuffer *sbuf, const char *list);
void dyn_strbuf_trimrightinplace(StringBuffer *sbuf, const char *list);
/* strbuf.h */
/* vallist.h */
