/* allocator.c */
void *nn_allocator_create(void);
void nn_allocator_destroy(void *msp);
void *nn_allocuser_malloc(void *msp, size_t nsize);
void *nn_allocuser_free(void *msp, void *ptr);
void *nn_allocuser_realloc(void *msp, void *ptr, size_t nsize);
/* core.c */
NNValue nn_argcheck_vfail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, va_list va);
NNValue nn_argcheck_fail(NNArgCheck *ch, const char *srcfile, int srcline, const char *fmt, ...);
void nn_argcheck_init(NNState *state, NNArgCheck *ch, const char *name, NNValue *argv, size_t argc);
NNProperty nn_property_makewithpointer(NNState *state, NNValue val, NNFieldType type);
NNProperty nn_property_makewithgetset(NNState *state, NNValue val, NNValue getter, NNValue setter, NNFieldType type);
NNProperty nn_property_make(NNState *state, NNValue val, NNFieldType type);
void nn_state_installmethods(NNState *state, NNObjClass *klass, NNConstClassMethodItem *listmethods);
void nn_state_initbuiltinmethods(NNState *state);
void nn_state_vwarn(NNState *state, const char *fmt, va_list va);
void nn_state_warn(NNState *state, const char *fmt, ...);
NNValue nn_except_getstacktrace(NNState *state);
bool nn_except_propagate(NNState *state);
bool nn_except_pushhandler(NNState *state, NNObjClass *type, int address, int finallyaddress);
bool nn_except_vthrowactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, va_list va);
bool nn_except_throwactual(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_throwwithclass(NNState *state, NNObjClass *klass, const char *srcfile, int srcline, const char *format, ...);
bool nn_except_vthrowwithclass(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, const char *format, va_list args);
NNInstruction nn_util_makeinst(bool isop, uint8_t code, int srcline);
NNObjClass *nn_except_makeclass(NNState *state, NNObjModule *module, const char *cstrname, bool iscs);
NNObjInstance *nn_except_makeinstance(NNState *state, NNObjClass *exklass, const char *srcfile, int srcline, NNObjString *message);
void nn_state_raisefatalerror(NNState *state, const char *format, ...);
bool nn_state_defglobalvalue(NNState *state, const char *name, NNValue val);
bool nn_state_defnativefunctionptr(NNState *state, const char *name, NNNativeFN fptr, void *uptr);
bool nn_state_defnativefunction(NNState *state, const char *name, NNNativeFN fptr);
NNObjClass *nn_util_makeclass(NNState *state, const char *name, NNObjClass *parent);
void nn_state_buildprocessinfo(NNState *state);
void nn_state_updateprocessinfo(NNState *state);
bool nn_state_makestack(NNState *pstate);
NNState *nn_state_makealloc(void);
bool nn_state_makewithuserptr(NNState *pstate, void *userptr);
void nn_state_destroy(NNState *state, bool onstack);
bool nn_util_methodisprivate(NNObjString *name);
NNObjFunction *nn_state_compilesource(NNState *state, NNObjModule *module, bool fromeval, const char *source, bool toplevel);
NNStatus nn_state_execsource(NNState *state, NNObjModule *module, const char *source, const char *filename, NNValue *dest);
NNValue nn_state_evalsource(NNState *state, const char *source);
/* dbg.c */
void nn_dbg_disasmblob(NNIOStream *pr, NNBlob *blob, const char *name);
void nn_dbg_printinstrname(NNIOStream *pr, const char *name);
int nn_dbg_printsimpleinstr(NNIOStream *pr, const char *name, int offset);
int nn_dbg_printconstinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printpropertyinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printshortinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printbyteinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printjumpinstr(NNIOStream *pr, const char *name, int sign, NNBlob *blob, int offset);
int nn_dbg_printtryinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinvokeinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
const char *nn_dbg_op2str(uint8_t instruc);
int nn_dbg_printclosureinstr(NNIOStream *pr, const char *name, NNBlob *blob, int offset);
int nn_dbg_printinstructionat(NNIOStream *pr, NNBlob *blob, int offset);
/* ioprinter.c */
void nn_valtable_print(NNState *state, NNIOStream *pr, NNHashValTable *table, const char *name);
void nn_iostream_initvars(NNState *state, NNIOStream *pr, NNPrMode mode);
bool nn_iostream_makestackio(NNState *state, NNIOStream *pr, FILE *fh, bool shouldclose);
bool nn_iostream_makestackopenfile(NNState *state, NNIOStream *pr, const char *path, bool writemode);
bool nn_iostream_makestackstring(NNState *state, NNIOStream *pr);
NNIOStream *nn_iostream_makeundefined(NNState *state, NNPrMode mode);
NNIOStream *nn_iostream_makeio(NNState *state, FILE *fh, bool shouldclose);
NNIOStream *nn_iostream_makeopenfile(NNState *state, const char *path, bool writemode);
NNIOStream *nn_iostream_makestring(NNState *state);
void nn_iostream_destroy(NNIOStream *pr);
NNObjString *nn_iostream_takestring(NNIOStream *pr);
NNObjString *nn_iostream_copystring(NNIOStream *pr);
bool nn_iostream_writestringl(NNIOStream *pr, const char *estr, size_t elen);
bool nn_iostream_writestring(NNIOStream *pr, const char *estr);
bool nn_iostream_writechar(NNIOStream *pr, int b);
bool nn_iostream_writeescapedchar(NNIOStream *pr, int ch);
bool nn_iostream_writequotedstring(NNIOStream *pr, const char *str, size_t len, bool withquot);
bool nn_iostream_vwritefmttostring(NNIOStream *pr, const char *fmt, va_list va);
bool nn_iostream_vwritefmt(NNIOStream *pr, const char *fmt, va_list va);
bool nn_iostream_printf(NNIOStream *pr, const char *fmt, ...);
void nn_iostream_printfunction(NNIOStream *pr, NNObjFunction *func);
void nn_iostream_printarray(NNIOStream *pr, NNObjArray *list);
void nn_iostream_printdict(NNIOStream *pr, NNObjDict *dict);
void nn_iostream_printfile(NNIOStream *pr, NNObjFile *file);
void nn_iostream_printinstance(NNIOStream *pr, NNObjInstance *instance, bool invmethod);
void nn_iostream_printtable(NNIOStream *pr, NNHashValTable *table);
void nn_iostream_printobjclass(NNIOStream *pr, NNValue value, bool fixstring, bool invmethod);
void nn_iostream_printobject(NNIOStream *pr, NNValue value, bool fixstring, bool invmethod);
void nn_iostream_printnumber(NNIOStream *pr, NNValue value);
void nn_iostream_printvalue(NNIOStream *pr, NNValue value, bool fixstring, bool invmethod);
/* libarray.c */
NNObjArray *nn_array_makefilled(NNState *state, size_t cnt, NNValue filler);
NNObjArray *nn_array_make(NNState *state);
NNObjArray *nn_object_makearray(NNState *state);
void nn_array_push(NNObjArray *list, NNValue value);
bool nn_array_get(NNObjArray *list, size_t idx, NNValue *vdest);
NNObjArray *nn_array_copy(NNObjArray *list, long start, long length);
void nn_state_installobjectarray(NNState *state);
/* libclass.c */
NNObjClass *nn_object_makeclass(NNState *state, NNObjString *name, NNObjClass *parent);
void nn_class_destroy(NNObjClass *klass);
bool nn_class_inheritfrom(NNObjClass *subclass, NNObjClass *superclass);
bool nn_class_defproperty(NNObjClass *klass, NNObjString *cstrname, NNValue val);
bool nn_class_defcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticcallablefieldptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticcallablefield(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_setstaticproperty(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativeconstructorptr(NNObjClass *klass, NNNativeFN function, void *uptr);
bool nn_class_defnativeconstructor(NNObjClass *klass, NNNativeFN function);
bool nn_class_defmethod(NNObjClass *klass, NNObjString *name, NNValue val);
bool nn_class_defnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *ptr);
bool nn_class_defnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
bool nn_class_defstaticnativemethodptr(NNObjClass *klass, NNObjString *name, NNNativeFN function, void *uptr);
bool nn_class_defstaticnativemethod(NNObjClass *klass, NNObjString *name, NNNativeFN function);
NNProperty *nn_class_getmethodfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getpropertyfield(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticproperty(NNObjClass *klass, NNObjString *name);
NNProperty *nn_class_getstaticmethodfield(NNObjClass *klass, NNObjString *name);
NNObjInstance *nn_object_makeinstancesize(NNState *state, NNObjClass *klass, size_t sz);
NNObjInstance *nn_object_makeinstance(NNState *state, NNObjClass *klass);
void nn_instance_mark(NNObjInstance *instance);
void nn_instance_destroy(NNObjInstance *instance);
bool nn_instance_defproperty(NNObjInstance *instance, NNObjString *name, NNValue val);
NNProperty *nn_instance_getvar(NNObjInstance *inst, NNObjString *name);
NNProperty *nn_instance_getvarcstr(NNObjInstance *inst, const char *name);
NNProperty *nn_instance_getmethod(NNObjInstance *inst, NNObjString *name);
NNProperty *nn_instance_getmethodcstr(NNObjInstance *inst, const char *name);
/* libdict.c */
NNObjDict *nn_object_makedict(NNState *state);
void nn_dict_destroy(NNObjDict *dict);
void nn_dict_mark(NNState *state, NNObjDict *dict);
bool nn_dict_setentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentry(NNObjDict *dict, NNValue key, NNValue value);
void nn_dict_addentrycstr(NNObjDict *dict, const char *ckey, NNValue value);
NNProperty *nn_dict_getentry(NNObjDict *dict, NNValue key);
NNObjDict *nn_dict_copy(NNObjDict *dict);
void nn_state_installobjectdict(NNState *state);
/* libfile.c */
NNObjFile *nn_object_makefile(NNState *state, FILE *handle, bool isstd, const char *path, const char *mode);
void nn_file_destroy(NNObjFile *file);
void nn_file_mark(NNObjFile *file);
bool nn_file_read(NNObjFile *file, size_t readhowmuch, NNIOResult *dest);
int nn_fileobject_close(NNObjFile *file);
bool nn_fileobject_open(NNObjFile *file);
void nn_state_installobjectfile(NNState *state);
/* libfunc.c */
NNObjFunction *nn_object_makefuncgeneric(NNState *state, NNObjString *name, NNObjType fntype, NNValue thisval);
NNObjFunction *nn_object_makefuncbound(NNState *state, NNValue receiver, NNObjFunction *method);
NNObjFunction *nn_object_makefuncscript(NNState *state, NNObjModule *module, NNFuncContextType type);
void nn_funcscript_destroy(NNObjFunction *ofn);
NNObjFunction *nn_object_makefuncnative(NNState *state, NNNativeFN natfn, const char *name, void *uptr);
NNObjFunction *nn_object_makefuncclosure(NNState *state, NNObjFunction *innerfn, NNValue thisval);
/* libmodule.c */
void nn_import_loadbuiltinmodules(NNState *state);
bool nn_state_addmodulesearchpathobj(NNState *state, NNObjString *os);
bool nn_state_addmodulesearchpath(NNState *state, const char *path);
void nn_state_setupmodulepaths(NNState *state);
void nn_module_setfilefield(NNState *state, NNObjModule *module);
void nn_module_destroy(NNState *state, NNObjModule *module);
NNObjModule *nn_import_loadmodulescript(NNState *state, NNObjModule *intomodule, NNObjString *modulename);
char *nn_import_resolvepath(NNState *state, const char *modulename, const char *currentfile, char *rootfile, bool isrelative);
bool nn_import_loadnativemodule(NNState *state, NNModInitFN init_fn, char *importname, const char *source, void *dlw);
void nn_import_addnativemodule(NNState *state, NNObjModule *module, const char *as);
void nn_import_closemodule(void *hnd);
/* libnumber.c */
void nn_state_installobjectnumber(NNState *state);
void nn_state_installmodmath(NNState *state);
/* libobject.c */
void nn_state_installobjectobject(NNState *state);
/* libprocess.c */
void nn_state_installobjectprocess(NNState *state);
/* librange.c */
void nn_state_installobjectrange(NNState *state);
/* libstring.c */
size_t nn_strutil_rndup2pow64(uint64_t x);
size_t nn_strutil_splitstr(char *str, char sep, char **ptrs, size_t nptrs);
size_t nn_strutil_charreplace(char *str, char from, char to);
void nn_strutil_reverseregion(char *str, size_t length);
bool nn_strutil_isallspace(const char *s);
char *nn_strutil_nextspace(char *s);
char *nn_strutil_trim(char *str);
size_t nn_strutil_chomp(char *str, size_t len);
size_t nn_strutil_countchar(const char *str, char c);
size_t nn_strutil_split(const char *splitat, const char *sourcetxt, char ***result);
void nn_strutil_callboundscheckinsert(NNStringBuffer *sb, size_t pos, const char *file, int line);
void nn_strutil_callboundscheckreadrange(NNStringBuffer *sb, size_t start, size_t len, const char *file, int line);
void nn_strutil_faststrncat(char *dest, const char *src, size_t *size);
size_t nn_strutil_strreplace1(char **str, size_t selflen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
size_t nn_strutil_strrepcount(const char *str, size_t slen, const char *findstr, size_t findlen, size_t sublen);
void nn_strutil_strreplace2(char *target, size_t tgtlen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool nn_strutil_inpreplhelper(char *dest, const char *src, size_t srclen, int findme, const char *substr, size_t sublen, size_t maxlen, size_t *dlen);
size_t nn_strutil_inpreplace(char *target, size_t tgtlen, int findme, const char *substr, size_t sublen, size_t maxlen);
NNStringBuffer *nn_strbuf_makelongfromptr(NNStringBuffer *sb, size_t len);
bool nn_strbuf_initbasicempty(NNStringBuffer *sb, const char *str, size_t len, bool onstack);
bool nn_strbuf_makebasicemptystack(NNStringBuffer *sb, const char *str, size_t len);
NNStringBuffer *nn_strbuf_makebasicempty(const char *str, size_t len);
bool nn_strbuf_destroyfromstack(NNStringBuffer *sb);
bool nn_strbuf_destroy(NNStringBuffer *sb);
void nn_strbuf_reset(NNStringBuffer *sb);
bool nn_strbuf_ensurecapacity(NNStringBuffer *sb, size_t len);
bool nn_strbuf_resize(NNStringBuffer *sb, size_t newlen);
bool nn_strbuf_setlength(NNStringBuffer *sb, size_t len);
bool nn_strbuf_setdata(NNStringBuffer *sb, char *str);
size_t nn_strbuf_length(NNStringBuffer *sb);
const char *nn_strbuf_data(NNStringBuffer *sb);
int nn_strbuf_get(NNStringBuffer *sb, size_t idx);
bool nn_strbuf_containschar(NNStringBuffer *sb, char ch);
bool nn_strbuf_fullreplace(NNStringBuffer *sb, const char *findstr, size_t findlen, const char *substr, size_t sublen);
bool nn_strbuf_charreplace(NNStringBuffer *sb, int findme, const char *substr, size_t sublen);
bool nn_strbuf_set(NNStringBuffer *sb, size_t idx, int b);
bool nn_strbuf_appendchar(NNStringBuffer *sb, int c);
bool nn_strbuf_appendstrn(NNStringBuffer *sb, const char *str, size_t len);
bool nn_strbuf_appendstr(NNStringBuffer *sb, const char *str);
bool nn_strbuf_appendbuff(NNStringBuffer *sb1, NNStringBuffer *sb2);
size_t nn_strutil_numofdigits(unsigned long v);
bool nn_strbuf_appendnumulong(NNStringBuffer *sb, unsigned long value);
bool nn_strbuf_appendnumlong(NNStringBuffer *sb, long value);
bool nn_strbuf_appendnumint(NNStringBuffer *sb, int value);
bool nn_strbuf_appendstrnlowercase(NNStringBuffer *sb, const char *str, size_t len);
bool nn_strbuf_appendstrnuppercase(NNStringBuffer *sb, const char *str, size_t len);
void nn_strbuf_shrink(NNStringBuffer *sb, size_t len);
size_t nn_strbuf_chomp(NNStringBuffer *sb);
void nn_strbuf_reverse(NNStringBuffer *sb);
char *nn_strbuf_substr(NNStringBuffer *sb, size_t start, size_t len);
void nn_strbuf_touppercase(NNStringBuffer *sb);
void nn_strbuf_tolowercase(NNStringBuffer *sb);
void nn_strbuf_copyover(NNStringBuffer *sb, size_t dstpos, const char *src, size_t len);
void nn_strbuf_insert(NNStringBuffer *sb, size_t dstpos, const char *src, size_t len);
void nn_strbuf_overwrite(NNStringBuffer *sb, size_t dstpos, size_t dstlen, const char *src, size_t srclen);
void nn_strbuf_erase(NNStringBuffer *sb, size_t pos, size_t len);
int nn_strbuf_appendformatposv(NNStringBuffer *sb, size_t pos, const char *fmt, va_list argptr);
int nn_strbuf_appendformatv(NNStringBuffer *sb, const char *fmt, va_list argptr);
int nn_strbuf_appendformat(NNStringBuffer *sb, const char *fmt, ...);
int nn_strbuf_appendformatat(NNStringBuffer *sb, size_t pos, const char *fmt, ...);
int nn_strbuf_appendformatnoterm(NNStringBuffer *sb, size_t pos, const char *fmt, ...);
void nn_strbuf_triminplace(NNStringBuffer *sb);
void nn_strbuf_trimleftinplace(NNStringBuffer *sb, const char *list);
void nn_strbuf_trimrightinplace(NNStringBuffer *sb, const char *list);
double nn_string_tabhashvaluecombine(const char *data, size_t len, uint32_t hsv);
NNObjString *nn_valtable_findstring(NNHashValTable *table, const char *findstr, size_t findlen, uint32_t findhash);
void nn_string_strtabstore(NNState *state, NNObjString *os);
NNObjString *nn_string_strtabfind(NNState *state, const char *str, size_t len, uint32_t hsv);
NNObjString *nn_string_makefromstrbuf(NNState *state, NNStringBuffer buf, uint32_t hsv, size_t length);
void nn_string_destroy(NNState *state, NNObjString *str);
NNObjString *nn_string_internlen(NNState *state, const char *strdata, int length);
NNObjString *nn_string_intern(NNState *state, const char *strdata);
NNObjString *nn_string_takelen(NNState *state, char *strdata, int length);
NNObjString *nn_string_takecstr(NNState *state, char *strdata);
NNObjString *nn_string_copylen(NNState *state, const char *strdata, int length);
NNObjString *nn_string_copycstr(NNState *state, const char *strdata);
NNObjString *nn_string_copyobject(NNState *state, NNObjString *origos);
const char *nn_string_getdata(NNObjString *os);
char *nn_string_mutdata(NNObjString *os);
size_t nn_string_getlength(NNObjString *os);
bool nn_string_setlength(NNObjString *os, size_t nlen);
bool nn_string_set(NNObjString *os, size_t idx, int byte);
int nn_string_get(NNObjString *os, size_t idx);
bool nn_string_appendstringlen(NNObjString *os, const char *str, size_t len);
bool nn_string_appendstring(NNObjString *os, const char *str);
bool nn_string_appendobject(NNObjString *os, NNObjString *other);
bool nn_string_appendbyte(NNObjString *os, int ch);
bool nn_string_appendnumulong(NNObjString *os, unsigned long val);
bool nn_string_appendnumint(NNObjString *os, int val);
int nn_string_appendfmtv(NNObjString *os, const char *fmt, va_list va);
int nn_string_appendfmt(NNObjString *os, const char *fmt, ...);
NNObjString *nn_string_substrlen(NNObjString *os, size_t start, size_t maxlen);
NNObjString *nn_string_substr(NNObjString *os, size_t start);
NNObjString *nn_string_substring(NNState *state, NNObjString *selfstr, size_t start, size_t end, bool likejs);
void nn_state_installobjectstring(NNState *state);
/* main.c */
int main(int argc, char *argv[], char **envp);
int replmain(const char *file);
/* mem.c */
void nn_memory_init(void);
void nn_memory_finish(void);
void *nn_memory_setsize(void *p, size_t sz);
size_t nn_memory_getsize(void *p);
void *nn_memory_malloc(size_t sz);
void *nn_memory_realloc(void *p, size_t nsz);
void *nn_memory_calloc(size_t count, size_t typsize);
void nn_memory_free(void *ptr);
NNObject *nn_gcmem_protect(NNState *state, NNObject *object);
void nn_gcmem_clearprotect(NNState *state);
void nn_gcmem_maybecollect(NNState *state, int addsize, bool wasnew);
void *nn_gcmem_allocate(NNState *state, size_t newsize, size_t amount, bool retain);
void nn_gcmem_release(NNState *state, void *pointer, size_t oldsize);
void nn_gcmem_markobject(NNState *state, NNObject *object);
void nn_gcmem_markvalue(NNState *state, NNValue value);
void nn_gcmem_blackenobject(NNState *state, NNObject *object);
void nn_object_destroy(NNState *state, NNObject *object);
void nn_gcmem_markroots(NNState *state);
void nn_gcmem_tracerefs(NNState *state);
void nn_gcmem_sweep(NNState *state);
void nn_gcmem_destroylinkedobjects(NNState *state);
void nn_gcmem_collectgarbage(NNState *state);
void nn_gcmem_markcompilerroots(NNState *state);
/* modast.c */
NNDefModule *nn_natmodule_load_astscan(NNState *state);
/* modcplx.c */
NNDefModule *nn_natmodule_load_complex(NNState *state);
/* modglobal.c */
void nn_state_initbuiltinfunctions(NNState *state);
/* modnull.c */
NNDefModule *nn_natmodule_load_null(NNState *state);
/* modos.c */
void nn_modfn_os_preloader(NNState *state);
NNValue nn_modfn_os_stat(NNState *state, NNValue thisval, NNValue *argv, size_t argc);
NNDefModule *nn_natmodule_load_os(NNState *state);
/* object.c */
NNObject *nn_object_allocobject(NNState *state, size_t size, NNObjType type, bool retain);
NNObjUpvalue *nn_object_makeupvalue(NNState *state, NNValue *slot, int stackpos);
NNObjUserdata *nn_object_makeuserdata(NNState *state, void *pointer, const char *name);
NNObjModule *nn_module_make(NNState *state, const char *name, const char *file, bool imported, bool retain);
NNObjSwitch *nn_object_makeswitch(NNState *state);
NNObjRange *nn_object_makerange(NNState *state, int lower, int upper);
/* oslib.c */
char *osfn_utilstrndup(const char *src, size_t len);
char *osfn_utilstrdup(const char *src);
bool fslib_diropen(FSDirReader *rd, const char *path);
bool fslib_dirread(FSDirReader *rd, FSDirItem *itm);
bool fslib_dirclose(FSDirReader *rd);
FILE *osfn_popen(const char *cmd, const char *type);
void osfn_pclose(FILE *fh);
int osfn_chmod(const char *path, int mode);
char *osfn_realpath(const char *path, char *respath);
char *osfn_dirname(const char *fname);
char *osfn_fallbackbasename(const char *opath);
char *osfn_basename(const char *path);
int osfn_isatty(int fd);
int osfn_symlink(const char *path1, const char *path2);
int osfn_symlinkat(const char *path1, int fd, const char *path2);
char *osfn_getcwd(char *buf, size_t size);
int osfn_lstat(const char *path, struct stat *buf);
int osfn_truncate(const char *path, size_t length);
unsigned int osfn_sleep(unsigned int seconds);
int osfn_gettimeofday(struct timeval *tp, void *tzp);
int osfn_mkdir(const char *path, size_t mode);
int osfn_rmdir(const char *path);
int osfn_unlink(const char *path);
const char *osfn_getenv(const char *key);
bool osfn_setenv(const char *key, const char *value, bool replace);
int osfn_chdir(const char *path);
int osfn_getpid(void);
int osfn_kill(int pid, int code);
bool nn_util_fsfileexists(NNState *state, const char *filepath);
bool nn_util_fsfileistype(NNState *state, const char *filepath, int typ);
bool nn_util_fsfileisfile(NNState *state, const char *filepath);
bool nn_util_fsfileisdirectory(NNState *state, const char *filepath);
char *nn_util_fsgetbasename(NNState *state, const char *path);
const char *nn_filestat_ctimetostring(const time_t *timep);
bool nn_filestat_initempty(NNFSStat *nfs);
bool nn_filestat_setup(NNFSStat *nfs);
bool nn_filestat_initfrompath(NNFSStat *nfs, const char *path);
/* parsercc.c */
void nn_blob_init(NNState *state, NNBlob *blob);
void nn_blob_push(NNBlob *blob, NNInstruction ins);
void nn_blob_destroy(NNBlob *blob);
int nn_blob_pushconst(NNBlob *blob, NNValue value);
void nn_astlex_init(NNAstLexer *lex, NNState *state, const char *source);
NNAstLexer *nn_astlex_make(NNState *state, const char *source);
void nn_astlex_destroy(NNState *state, NNAstLexer *lex);
bool nn_astlex_isatend(NNAstLexer *lex);
const char *nn_astutil_toktype2str(int t);
NNAstToken nn_astlex_scanstring(NNAstLexer *lex, char quote, bool withtemplate, bool permitescapes);
NNAstToken nn_astlex_scannumber(NNAstLexer *lex);
NNAstToken nn_astlex_scanident(NNAstLexer *lex, bool isdollar);
NNAstToken nn_astlex_scantoken(NNAstLexer *lex);
NNAstParser *nn_astparser_makeparser(NNState *state, NNAstLexer *lexer, NNObjModule *module, bool keeplast);
void nn_astparser_destroy(NNAstParser *parser);
bool nn_astparser_istype(NNAstTokType prev, NNAstTokType t);
NNValue nn_astparser_compilestrnumber(NNAstTokType type, const char *source);
NNAstRule *nn_astparser_getrule(NNAstTokType type);
NNObjFunction *nn_astparser_compilesource(NNState *state, NNObjModule *module, const char *source, NNBlob *blob, bool fromimport, bool keeplast);
/* utf.c */
void nn_utf8iter_init(utf8iterator_t *iter, const char *ptr, uint32_t length);
uint8_t nn_utf8iter_charsize(const char *character);
uint32_t nn_utf8iter_converter(const char *character, uint8_t size);
uint8_t nn_utf8iter_next(utf8iterator_t *iter);
const char *nn_utf8iter_getchar(utf8iterator_t *iter);
int nn_util_utf8numbytes(int value);
char *nn_util_utf8encode(unsigned int code, size_t *dlen);
int nn_util_utf8decode(const uint8_t *bytes, uint32_t length);
char *nn_util_utf8codepoint(const char *str, char *outcodepoint);
char *nn_util_utf8strstr(const char *haystack, const char *needle);
char *nn_util_utf8index(char *s, int pos);
void nn_util_utf8slice(char *s, int *start, int *end);
/* utilarray.c */
void nn_valarray_init(NNState *state, NNValArray *list);
NNValArray *nn_valarray_make(NNState *state);
void nn_valarray_destroy(NNValArray *list, bool actuallydelete);
void nn_valarray_mark(NNValArray *list);
bool nn_valarray_push(NNValArray *list, NNValue value);
bool nn_valarray_set(NNValArray *list, size_t idx, NNValue val);
bool nn_valarray_removeatintern(NNValArray *list, unsigned int ix);
bool nn_valarray_removeat(NNValArray *list, unsigned int ix);
bool nn_valarray_ensurecapacity(NNValArray *list, size_t needsize, NNValue fillval, bool first);
NNValArray *nn_valarray_copy(NNValArray *list);
void nn_valarray_setempty(NNValArray *list);
/* utilfmt.c */
void nn_strformat_init(NNState *state, NNFormatInfo *nfi, NNIOStream *writer, const char *fmtstr, size_t fmtlen);
void nn_strformat_destroy(NNFormatInfo *nfi);
bool nn_strformat_format(NNFormatInfo *nfi, int argc, int argbegin, NNValue *argv);
/* utilhmap.c */
void nn_valtable_init(NNState *state, NNHashValTable *tab);
void nn_valtable_destroy(NNHashValTable *table);
NNHashValEntry *nn_valtable_findentrybyvalue(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue key);
NNHashValEntry *nn_valtable_findentrybystr(NNHashValTable *table, NNHashValEntry *entries, int capacity, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyvalue(NNHashValTable *table, NNValue key);
NNProperty *nn_valtable_getfieldbystr(NNHashValTable *table, NNValue valkey, const char *kstr, size_t klen, uint32_t hsv);
NNProperty *nn_valtable_getfieldbyostr(NNHashValTable *table, NNObjString *str);
NNProperty *nn_valtable_getfieldbycstr(NNHashValTable *table, const char *kstr);
NNProperty *nn_valtable_getfield(NNHashValTable *table, NNValue key);
bool nn_valtable_get(NNHashValTable *table, NNValue key, NNValue *value);
bool nn_valtable_adjustcapacity(NNHashValTable *table, int capacity);
bool nn_valtable_setwithtype(NNHashValTable *table, NNValue key, NNValue value, NNFieldType ftyp, bool keyisstring);
bool nn_valtable_set(NNHashValTable *table, NNValue key, NNValue value);
bool nn_valtable_delete(NNHashValTable *table, NNValue key);
bool nn_valtable_addall(NNHashValTable *from, NNHashValTable *to, bool keepgoing);
void nn_valtable_importall(NNHashValTable *from, NNHashValTable *to);
bool nn_valtable_copy(NNHashValTable *from, NNHashValTable *to);
NNValue nn_valtable_findkey(NNHashValTable *table, NNValue value);
NNObjArray *nn_valtable_getkeys(NNHashValTable *table);
void nn_valtable_mark(NNState *state, NNHashValTable *table);
void nn_valtable_removewhites(NNState *state, NNHashValTable *table);
/* utilstd.c */
size_t nn_util_rndup2pow64(uint64_t x);
const char *nn_util_color(NNColor tc);
char *nn_util_strndup(const char *src, size_t len);
char *nn_util_strdup(const char *src);
void nn_util_mtseed(uint32_t seed, uint32_t *binst, uint32_t *index);
uint32_t nn_util_mtgenerate(uint32_t *binst, uint32_t *index);
double nn_util_mtrand(double lowerlimit, double upperlimit);
char *nn_util_filereadhandle(NNState *state, FILE *hnd, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filereadfile(NNState *state, const char *filename, size_t *dlen, bool havemaxsz, size_t maxsize);
char *nn_util_filegetshandle(char *s, int size, FILE *f, size_t *lendest);
int nn_util_filegetlinehandle(char **lineptr, size_t *destlen, FILE *hnd);
char *nn_util_strtoupper(char *str, size_t length);
char *nn_util_strtolower(char *str, size_t length);
NNObjString *nn_util_numbertobinstring(NNState *state, long n);
NNObjString *nn_util_numbertooctstring(NNState *state, int64_t n, bool numeric);
NNObjString *nn_util_numbertohexstring(NNState *state, int64_t n, bool numeric);
uint32_t nn_object_hashobject(NNObject *object);
uint32_t nn_value_hashvalue(NNValue value);
/* value.c */
NNValue nn_value_copystrlen(NNState *state, const char *str, size_t len);
NNValue nn_value_copystr(NNState *state, const char *str);
NNObjString *nn_value_tostring(NNState *state, NNValue value);
const char *nn_value_objecttypename(NNObject *object, bool detailed);
const char *nn_value_typename(NNValue value, bool detailed);
bool nn_value_isfalse(NNValue value);
bool nn_value_compobjarray(NNState *state, NNObject *oa, NNObject *ob);
bool nn_value_compobjstring(NNState *state, NNObject *oa, NNObject *ob);
bool nn_value_compobjdict(NNState *state, NNObject *oa, NNObject *ob);
bool nn_value_compobject(NNState *state, NNValue a, NNValue b);
bool nn_value_compare_actual(NNState *state, NNValue a, NNValue b);
bool nn_value_compare(NNState *state, NNValue a, NNValue b);
NNValue nn_value_findgreater(NNValue a, NNValue b);
void nn_value_sortvalues(NNState *state, NNValue *values, int count);
NNValue nn_value_copyvalue(NNState *state, NNValue value);
/* vm.c */
void nn_vm_initvmstate(NNState *state);
void nn_state_resetvmstate(NNState *state);
bool nn_vm_callclosure(NNState *state, NNObjFunction *closure, NNValue thisval, int argcount, bool fromoperator);
bool nn_vm_callvaluewithobject(NNState *state, NNValue callable, NNValue thisval, int argcount, bool fromoper);
bool nn_vm_callvalue(NNState *state, NNValue callable, NNValue thisval, int argcount, bool fromoperator);
NNObjClass *nn_value_getclassfor(NNState *state, NNValue receiver);
void nn_vm_stackpush(NNState *state, NNValue value);
NNValue nn_vm_stackpop(NNState *state);
NNValue nn_vm_stackpopn(NNState *state, int n);
NNValue nn_vm_stackpeek(NNState *state, int distance);
bool nn_util_isinstanceof(NNObjClass *klass1, NNObjClass *expected);
NNStatus nn_vm_runvm(NNState *state, int exitframe, NNValue *rv);
int nn_nestcall_prepare(NNState *state, NNValue callable, NNValue mthobj, NNValue *callarr, int maxcallarr);
bool nn_nestcall_callfunction(NNState *state, NNValue callable, NNValue thisval, NNValue *argv, size_t argc, NNValue *dest, bool fromoper);
/* allocator.h */
/* lino.h */
/* mrx.h */
/* neon.h */
/* optparse.h */
/* oslib.h */
/* priv.h */
/* replinc.h */
int main(int argc, char *argv[], char **envp);
int replmain(const char *file);
/* strbuf.h */
size_t nn_strutil_rndup2pow64(uint64_t x);
size_t nn_strutil_splitstr(char *str, char sep, char **ptrs, size_t nptrs);
size_t nn_strutil_charreplace(char *str, char from, char to);
void nn_strutil_reverseregion(char *str, size_t length);
char *nn_strutil_nextspace(char *s);
char *nn_strutil_trim(char *str);
size_t nn_strutil_chomp(char *str, size_t len);
size_t nn_strutil_countchar(const char *str, char c);
size_t nn_strutil_split(const char *splitat, const char *sourcetxt, char ***result);
void nn_strutil_faststrncat(char *dest, const char *src, size_t *size);
size_t nn_strutil_strreplace1(char **str, size_t selflen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
size_t nn_strutil_strrepcount(const char *str, size_t slen, const char *findstr, size_t findlen, size_t sublen);
void nn_strutil_strreplace2(char *target, size_t tgtlen, const char *findstr, size_t findlen, const char *substr, size_t sublen);
size_t nn_strutil_inpreplace(char *target, size_t tgtlen, int findme, const char *substr, size_t sublen, size_t maxlen);
size_t nn_strutil_numofdigits(unsigned long v);
