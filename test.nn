
const CplxMod = import("complex")
const Complex = CplxMod.Complex

function dump_num(name, n)
{
    //printf("%s: real=%g imag=%g\n", name, n.re, n.im);
}

const image_width = 150;
const image_height = 50;
const max_iter = 100;
const escape = 2;

function mandel()
{
    var x;
    var y;
    var n;
    var c;
    var z;
    var start_x = Complex(-2.100000000000000088817841970012523233890533447265625e+0, 0.0);
    print("start_x=", start_x)
    var end_x = Complex(1.0e+0, 0.0);
    var start_y = Complex(-1.25e+0, 0.0);
    var step_x = ((end_x - start_x) / Complex(1.5e+2, 0.0));
    var step_y = (((Complex(0, 0) - start_y) - start_y) / Complex(5.0e+1, 0.0));
    var stepval = Complex(0.0, 1.0e+0);
    dump_num("start_x", start_x);
    dump_num("end_x", end_x);
    dump_num("start_y", start_y);
    dump_num("step_x", step_x);
    dump_num("step_y", step_y);
    dump_num("stepval", stepval);
    for(y = 0; y < image_height; y++)
    {
        for(x = 0; x < image_width; x++)
        {
            c = (((Complex(x, 0) * step_x) + start_x) + (((Complex(y, 0) * step_y) + start_y) * stepval));
            z = Complex(0, 0);
            for(n = 0; n < max_iter; n++)
            {
                z = (z * z);
                z = (z + c);
                if(Math.hypot(z.re, z.im) >= escape)
                {
                    break;
                }
            }
            if(n == max_iter)
            {
                print("-");
            }
            else if(n > 6)
            {
                print(".");
            }
            else if(n > 3)
            {
                print("+");
            }
            else if(n > 2)
            {
                print("x");
            }
            else
            {
                print("*");
            }
        }
        print("\n");
    }
}
function main()
{
    mandel();
    return 0;
}
main();
